// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	strconv "strconv"
)

type Stream capnp.Client

// Stream_TypeID is the unique identifier for the type Stream.
const Stream_TypeID = 0x84069a7f843bfddd

func (c Stream) GetNext(ctx context.Context, params func(Stream_getNext_Params) error) (Stream_getNext_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84069a7f843bfddd,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Stream",
			MethodName:    "getNext",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stream_getNext_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Stream_getNext_Results_Future{Future: ans.Future()}, release

}

func (c Stream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Stream) String() string {
	return "Stream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Stream) AddRef() Stream {
	return Stream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Stream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Stream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Stream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Stream) DecodeFromPtr(p capnp.Ptr) Stream {
	return Stream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Stream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Stream) IsSame(other Stream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Stream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Stream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Stream_Server is a Stream with a local implementation.
type Stream_Server interface {
	GetNext(context.Context, Stream_getNext) error
}

// Stream_NewServer creates a new Server from an implementation of Stream_Server.
func Stream_NewServer(s Stream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stream_Methods(nil, s), s, c)
}

// Stream_ServerToClient creates a new Client from an implementation of Stream_Server.
// The caller is responsible for calling Release on the returned Client.
func Stream_ServerToClient(s Stream_Server) Stream {
	return Stream(capnp.NewClient(Stream_NewServer(s)))
}

// Stream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stream_Methods(methods []server.Method, s Stream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84069a7f843bfddd,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Stream",
			MethodName:    "getNext",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetNext(ctx, Stream_getNext{call})
		},
	})

	return methods
}

// Stream_getNext holds the state for a server call to Stream.getNext.
// See server.Call for documentation.
type Stream_getNext struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stream_getNext) Args() Stream_getNext_Params {
	return Stream_getNext_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Stream_getNext) AllocResults() (Stream_getNext_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Stream_getNext_Results(r), err
}

// Stream_List is a list of Stream.
type Stream_List = capnp.CapList[Stream]

// NewStream creates a new list of Stream.
func NewStream_List(s *capnp.Segment, sz int32) (Stream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Stream](l), err
}

type Stream_getNext_Params capnp.Struct

// Stream_getNext_Params_TypeID is the unique identifier for the type Stream_getNext_Params.
const Stream_getNext_Params_TypeID = 0xc81df90babfab2e6

func NewStream_getNext_Params(s *capnp.Segment) (Stream_getNext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stream_getNext_Params(st), err
}

func NewRootStream_getNext_Params(s *capnp.Segment) (Stream_getNext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stream_getNext_Params(st), err
}

func ReadRootStream_getNext_Params(msg *capnp.Message) (Stream_getNext_Params, error) {
	root, err := msg.Root()
	return Stream_getNext_Params(root.Struct()), err
}

func (s Stream_getNext_Params) String() string {
	str, _ := text.Marshal(0xc81df90babfab2e6, capnp.Struct(s))
	return str
}

func (s Stream_getNext_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stream_getNext_Params) DecodeFromPtr(p capnp.Ptr) Stream_getNext_Params {
	return Stream_getNext_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stream_getNext_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stream_getNext_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stream_getNext_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stream_getNext_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Stream_getNext_Params_List is a list of Stream_getNext_Params.
type Stream_getNext_Params_List = capnp.StructList[Stream_getNext_Params]

// NewStream_getNext_Params creates a new list of Stream_getNext_Params.
func NewStream_getNext_Params_List(s *capnp.Segment, sz int32) (Stream_getNext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Stream_getNext_Params](l), err
}

// Stream_getNext_Params_Future is a wrapper for a Stream_getNext_Params promised by a client call.
type Stream_getNext_Params_Future struct{ *capnp.Future }

func (f Stream_getNext_Params_Future) Struct() (Stream_getNext_Params, error) {
	p, err := f.Future.Ptr()
	return Stream_getNext_Params(p.Struct()), err
}

type Stream_getNext_Results capnp.Struct

// Stream_getNext_Results_TypeID is the unique identifier for the type Stream_getNext_Results.
const Stream_getNext_Results_TypeID = 0xbc5bf1f5cdc6c612

func NewStream_getNext_Results(s *capnp.Segment) (Stream_getNext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Stream_getNext_Results(st), err
}

func NewRootStream_getNext_Results(s *capnp.Segment) (Stream_getNext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Stream_getNext_Results(st), err
}

func ReadRootStream_getNext_Results(msg *capnp.Message) (Stream_getNext_Results, error) {
	root, err := msg.Root()
	return Stream_getNext_Results(root.Struct()), err
}

func (s Stream_getNext_Results) String() string {
	str, _ := text.Marshal(0xbc5bf1f5cdc6c612, capnp.Struct(s))
	return str
}

func (s Stream_getNext_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stream_getNext_Results) DecodeFromPtr(p capnp.Ptr) Stream_getNext_Results {
	return Stream_getNext_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stream_getNext_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stream_getNext_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stream_getNext_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stream_getNext_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stream_getNext_Results) Next() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Stream_getNext_Results) HasNext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Stream_getNext_Results) SetNext(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Stream_getNext_Results_List is a list of Stream_getNext_Results.
type Stream_getNext_Results_List = capnp.StructList[Stream_getNext_Results]

// NewStream_getNext_Results creates a new list of Stream_getNext_Results.
func NewStream_getNext_Results_List(s *capnp.Segment, sz int32) (Stream_getNext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Stream_getNext_Results](l), err
}

// Stream_getNext_Results_Future is a wrapper for a Stream_getNext_Results promised by a client call.
type Stream_getNext_Results_Future struct{ *capnp.Future }

func (f Stream_getNext_Results_Future) Struct() (Stream_getNext_Results, error) {
	p, err := f.Future.Ptr()
	return Stream_getNext_Results(p.Struct()), err
}
func (p Stream_getNext_Results_Future) Next() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Lifecycle capnp.Client

// Lifecycle_TypeID is the unique identifier for the type Lifecycle.
const Lifecycle_TypeID = 0xe3f0f119a46054a0

func (c Lifecycle) WaitEnd(ctx context.Context, params func(Lifecycle_waitEnd_Params) error) (Lifecycle_waitEnd_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe3f0f119a46054a0,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Lifecycle",
			MethodName:    "waitEnd",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Lifecycle_waitEnd_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Lifecycle_waitEnd_Results_Future{Future: ans.Future()}, release

}

func (c Lifecycle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Lifecycle) String() string {
	return "Lifecycle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Lifecycle) AddRef() Lifecycle {
	return Lifecycle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Lifecycle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Lifecycle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Lifecycle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Lifecycle) DecodeFromPtr(p capnp.Ptr) Lifecycle {
	return Lifecycle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Lifecycle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Lifecycle) IsSame(other Lifecycle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Lifecycle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Lifecycle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Lifecycle_Server is a Lifecycle with a local implementation.
type Lifecycle_Server interface {
	WaitEnd(context.Context, Lifecycle_waitEnd) error
}

// Lifecycle_NewServer creates a new Server from an implementation of Lifecycle_Server.
func Lifecycle_NewServer(s Lifecycle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Lifecycle_Methods(nil, s), s, c)
}

// Lifecycle_ServerToClient creates a new Client from an implementation of Lifecycle_Server.
// The caller is responsible for calling Release on the returned Client.
func Lifecycle_ServerToClient(s Lifecycle_Server) Lifecycle {
	return Lifecycle(capnp.NewClient(Lifecycle_NewServer(s)))
}

// Lifecycle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Lifecycle_Methods(methods []server.Method, s Lifecycle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe3f0f119a46054a0,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Lifecycle",
			MethodName:    "waitEnd",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WaitEnd(ctx, Lifecycle_waitEnd{call})
		},
	})

	return methods
}

// Lifecycle_waitEnd holds the state for a server call to Lifecycle.waitEnd.
// See server.Call for documentation.
type Lifecycle_waitEnd struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Lifecycle_waitEnd) Args() Lifecycle_waitEnd_Params {
	return Lifecycle_waitEnd_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Lifecycle_waitEnd) AllocResults() (Lifecycle_waitEnd_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Lifecycle_waitEnd_Results(r), err
}

// Lifecycle_List is a list of Lifecycle.
type Lifecycle_List = capnp.CapList[Lifecycle]

// NewLifecycle creates a new list of Lifecycle.
func NewLifecycle_List(s *capnp.Segment, sz int32) (Lifecycle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Lifecycle](l), err
}

type Lifecycle_waitEnd_Params capnp.Struct

// Lifecycle_waitEnd_Params_TypeID is the unique identifier for the type Lifecycle_waitEnd_Params.
const Lifecycle_waitEnd_Params_TypeID = 0x8c2aa6b5597e9212

func NewLifecycle_waitEnd_Params(s *capnp.Segment) (Lifecycle_waitEnd_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Lifecycle_waitEnd_Params(st), err
}

func NewRootLifecycle_waitEnd_Params(s *capnp.Segment) (Lifecycle_waitEnd_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Lifecycle_waitEnd_Params(st), err
}

func ReadRootLifecycle_waitEnd_Params(msg *capnp.Message) (Lifecycle_waitEnd_Params, error) {
	root, err := msg.Root()
	return Lifecycle_waitEnd_Params(root.Struct()), err
}

func (s Lifecycle_waitEnd_Params) String() string {
	str, _ := text.Marshal(0x8c2aa6b5597e9212, capnp.Struct(s))
	return str
}

func (s Lifecycle_waitEnd_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Lifecycle_waitEnd_Params) DecodeFromPtr(p capnp.Ptr) Lifecycle_waitEnd_Params {
	return Lifecycle_waitEnd_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Lifecycle_waitEnd_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Lifecycle_waitEnd_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Lifecycle_waitEnd_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Lifecycle_waitEnd_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Lifecycle_waitEnd_Params_List is a list of Lifecycle_waitEnd_Params.
type Lifecycle_waitEnd_Params_List = capnp.StructList[Lifecycle_waitEnd_Params]

// NewLifecycle_waitEnd_Params creates a new list of Lifecycle_waitEnd_Params.
func NewLifecycle_waitEnd_Params_List(s *capnp.Segment, sz int32) (Lifecycle_waitEnd_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Lifecycle_waitEnd_Params](l), err
}

// Lifecycle_waitEnd_Params_Future is a wrapper for a Lifecycle_waitEnd_Params promised by a client call.
type Lifecycle_waitEnd_Params_Future struct{ *capnp.Future }

func (f Lifecycle_waitEnd_Params_Future) Struct() (Lifecycle_waitEnd_Params, error) {
	p, err := f.Future.Ptr()
	return Lifecycle_waitEnd_Params(p.Struct()), err
}

type Lifecycle_waitEnd_Results capnp.Struct

// Lifecycle_waitEnd_Results_TypeID is the unique identifier for the type Lifecycle_waitEnd_Results.
const Lifecycle_waitEnd_Results_TypeID = 0xdedd203806608933

func NewLifecycle_waitEnd_Results(s *capnp.Segment) (Lifecycle_waitEnd_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Lifecycle_waitEnd_Results(st), err
}

func NewRootLifecycle_waitEnd_Results(s *capnp.Segment) (Lifecycle_waitEnd_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Lifecycle_waitEnd_Results(st), err
}

func ReadRootLifecycle_waitEnd_Results(msg *capnp.Message) (Lifecycle_waitEnd_Results, error) {
	root, err := msg.Root()
	return Lifecycle_waitEnd_Results(root.Struct()), err
}

func (s Lifecycle_waitEnd_Results) String() string {
	str, _ := text.Marshal(0xdedd203806608933, capnp.Struct(s))
	return str
}

func (s Lifecycle_waitEnd_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Lifecycle_waitEnd_Results) DecodeFromPtr(p capnp.Ptr) Lifecycle_waitEnd_Results {
	return Lifecycle_waitEnd_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Lifecycle_waitEnd_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Lifecycle_waitEnd_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Lifecycle_waitEnd_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Lifecycle_waitEnd_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Lifecycle_waitEnd_Results_List is a list of Lifecycle_waitEnd_Results.
type Lifecycle_waitEnd_Results_List = capnp.StructList[Lifecycle_waitEnd_Results]

// NewLifecycle_waitEnd_Results creates a new list of Lifecycle_waitEnd_Results.
func NewLifecycle_waitEnd_Results_List(s *capnp.Segment, sz int32) (Lifecycle_waitEnd_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Lifecycle_waitEnd_Results](l), err
}

// Lifecycle_waitEnd_Results_Future is a wrapper for a Lifecycle_waitEnd_Results promised by a client call.
type Lifecycle_waitEnd_Results_Future struct{ *capnp.Future }

func (f Lifecycle_waitEnd_Results_Future) Struct() (Lifecycle_waitEnd_Results, error) {
	p, err := f.Future.Ptr()
	return Lifecycle_waitEnd_Results(p.Struct()), err
}

type Config capnp.Struct

// Config_TypeID is the unique identifier for the type Config.
const Config_TypeID = 0xac6ffe76feadd8b7

func NewConfig(s *capnp.Segment) (Config, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Config(st), err
}

func NewRootConfig(s *capnp.Segment) (Config, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Config(st), err
}

func ReadRootConfig(msg *capnp.Message) (Config, error) {
	root, err := msg.Root()
	return Config(root.Struct()), err
}

func (s Config) String() string {
	str, _ := text.Marshal(0xac6ffe76feadd8b7, capnp.Struct(s))
	return str
}

func (s Config) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Config) DecodeFromPtr(p capnp.Ptr) Config {
	return Config(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Config) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Config) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Config) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Config) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Config) Predicates() (Config_Predicate_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Config_Predicate_List(p.List()), err
}

func (s Config) HasPredicates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Config) SetPredicates(v Config_Predicate_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPredicates sets the predicates field to a newly
// allocated Config_Predicate_List, preferring placement in s's segment.
func (s Config) NewPredicates(n int32) (Config_Predicate_List, error) {
	l, err := NewConfig_Predicate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Config_Predicate_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Config_List is a list of Config.
type Config_List = capnp.StructList[Config]

// NewConfig creates a new list of Config.
func NewConfig_List(s *capnp.Segment, sz int32) (Config_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Config](l), err
}

// Config_Future is a wrapper for a Config promised by a client call.
type Config_Future struct{ *capnp.Future }

func (f Config_Future) Struct() (Config, error) {
	p, err := f.Future.Ptr()
	return Config(p.Struct()), err
}

type Config_Predicate capnp.Struct

// Config_Predicate_TypeID is the unique identifier for the type Config_Predicate.
const Config_Predicate_TypeID = 0xde0ca4ca47cb48e9

func NewConfig_Predicate(s *capnp.Segment) (Config_Predicate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Config_Predicate(st), err
}

func NewRootConfig_Predicate(s *capnp.Segment) (Config_Predicate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Config_Predicate(st), err
}

func ReadRootConfig_Predicate(msg *capnp.Message) (Config_Predicate, error) {
	root, err := msg.Root()
	return Config_Predicate(root.Struct()), err
}

func (s Config_Predicate) String() string {
	str, _ := text.Marshal(0xde0ca4ca47cb48e9, capnp.Struct(s))
	return str
}

func (s Config_Predicate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Config_Predicate) DecodeFromPtr(p capnp.Ptr) Config_Predicate {
	return Config_Predicate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Config_Predicate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Config_Predicate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Config_Predicate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Config_Predicate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Config_Predicate) BinaryPathRegex() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Config_Predicate) HasBinaryPathRegex() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Config_Predicate) BinaryPathRegexBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Config_Predicate) SetBinaryPathRegex(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Config_Predicate_List is a list of Config_Predicate.
type Config_Predicate_List = capnp.StructList[Config_Predicate]

// NewConfig_Predicate creates a new list of Config_Predicate.
func NewConfig_Predicate_List(s *capnp.Segment, sz int32) (Config_Predicate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Config_Predicate](l), err
}

// Config_Predicate_Future is a wrapper for a Config_Predicate promised by a client call.
type Config_Predicate_Future struct{ *capnp.Future }

func (f Config_Predicate_Future) Struct() (Config_Predicate, error) {
	p, err := f.Future.Ptr()
	return Config_Predicate(p.Struct()), err
}

type Identifier capnp.Struct

// Identifier_TypeID is the unique identifier for the type Identifier.
const Identifier_TypeID = 0x8d1fa8491f7ca82a

func NewIdentifier(s *capnp.Segment) (Identifier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Identifier(st), err
}

func NewRootIdentifier(s *capnp.Segment) (Identifier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Identifier(st), err
}

func ReadRootIdentifier(msg *capnp.Message) (Identifier, error) {
	root, err := msg.Root()
	return Identifier(root.Struct()), err
}

func (s Identifier) String() string {
	str, _ := text.Marshal(0x8d1fa8491f7ca82a, capnp.Struct(s))
	return str
}

func (s Identifier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identifier) DecodeFromPtr(p capnp.Ptr) Identifier {
	return Identifier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identifier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identifier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identifier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identifier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identifier) Identifier() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Identifier) SetIdentifier(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Identifier_List is a list of Identifier.
type Identifier_List = capnp.StructList[Identifier]

// NewIdentifier creates a new list of Identifier.
func NewIdentifier_List(s *capnp.Segment, sz int32) (Identifier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Identifier](l), err
}

// Identifier_Future is a wrapper for a Identifier promised by a client call.
type Identifier_Future struct{ *capnp.Future }

func (f Identifier_Future) Struct() (Identifier, error) {
	p, err := f.Future.Ptr()
	return Identifier(p.Struct()), err
}

type Process capnp.Struct
type Process_proc Process

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xa07ce2c64c52e0d1

func NewProcess(s *capnp.Segment) (Process, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Process(st), err
}

func NewRootProcess(s *capnp.Segment) (Process, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Process(st), err
}

func ReadRootProcess(msg *capnp.Message) (Process, error) {
	root, err := msg.Root()
	return Process(root.Struct()), err
}

func (s Process) String() string {
	str, _ := text.Marshal(0xa07ce2c64c52e0d1, capnp.Struct(s))
	return str
}

func (s Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process) Handle() Process_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process_Handle(p.Interface().Client())
}

func (s Process) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process) SetHandle(v Process_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process) Proc() Process_proc { return Process_proc(s) }

func (s Process_proc) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_proc) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_proc) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_proc) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_proc) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Process_proc) Exe() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Process_proc) HasExe() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Process_proc) SetExe(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Process_proc) Cmdline() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Process_proc) HasCmdline() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Process_proc) SetCmdline(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s Process) Executable() (Identifier, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Identifier(p.Struct()), err
}

func (s Process) HasExecutable() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Process) SetExecutable(v Identifier) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewExecutable sets the executable field to a newly
// allocated Identifier struct, preferring placement in s's segment.
func (s Process) NewExecutable() (Identifier, error) {
	ss, err := NewIdentifier(capnp.Struct(s).Segment())
	if err != nil {
		return Identifier{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Process_List is a list of Process.
type Process_List = capnp.StructList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Process](l), err
}

// Process_Future is a wrapper for a Process promised by a client call.
type Process_Future struct{ *capnp.Future }

func (f Process_Future) Struct() (Process, error) {
	p, err := f.Future.Ptr()
	return Process(p.Struct()), err
}
func (p Process_Future) Handle() Process_Handle {
	return Process_Handle(p.Future.Field(0, nil).Client())
}

func (p Process_Future) Proc() Process_proc_Future { return Process_proc_Future{p.Future} }

// Process_proc_Future is a wrapper for a Process_proc promised by a client call.
type Process_proc_Future struct{ *capnp.Future }

func (f Process_proc_Future) Struct() (Process_proc, error) {
	p, err := f.Future.Ptr()
	return Process_proc(p.Struct()), err
}
func (p Process_Future) Executable() Identifier_Future {
	return Identifier_Future{Future: p.Future.Field(3, nil)}
}

type Process_Handle capnp.Client

// Process_Handle_TypeID is the unique identifier for the type Process_Handle.
const Process_Handle_TypeID = 0xcdc496179ffe7754

func (c Process_Handle) WaitEnd(ctx context.Context, params func(Lifecycle_waitEnd_Params) error) (Lifecycle_waitEnd_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe3f0f119a46054a0,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Lifecycle",
			MethodName:    "waitEnd",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Lifecycle_waitEnd_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Lifecycle_waitEnd_Results_Future{Future: ans.Future()}, release

}

func (c Process_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process_Handle) String() string {
	return "Process_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process_Handle) AddRef() Process_Handle {
	return Process_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process_Handle) DecodeFromPtr(p capnp.Ptr) Process_Handle {
	return Process_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process_Handle) IsSame(other Process_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Handle_Server is a Process_Handle with a local implementation.
type Process_Handle_Server interface {
	WaitEnd(context.Context, Lifecycle_waitEnd) error
}

// Process_Handle_NewServer creates a new Server from an implementation of Process_Handle_Server.
func Process_Handle_NewServer(s Process_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Handle_Methods(nil, s), s, c)
}

// Process_Handle_ServerToClient creates a new Client from an implementation of Process_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_Handle_ServerToClient(s Process_Handle_Server) Process_Handle {
	return Process_Handle(capnp.NewClient(Process_Handle_NewServer(s)))
}

// Process_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Handle_Methods(methods []server.Method, s Process_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe3f0f119a46054a0,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Lifecycle",
			MethodName:    "waitEnd",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WaitEnd(ctx, Lifecycle_waitEnd{call})
		},
	})

	return methods
}

// Process_Handle_List is a list of Process_Handle.
type Process_Handle_List = capnp.CapList[Process_Handle]

// NewProcess_Handle creates a new list of Process_Handle.
func NewProcess_Handle_List(s *capnp.Segment, sz int32) (Process_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process_Handle](l), err
}

type Ex capnp.Client

// Ex_TypeID is the unique identifier for the type Ex.
const Ex_TypeID = 0xf4fe7b7026d7e809

func (c Ex) GetMachinas(ctx context.Context, params func(Ex_getMachinas_Params) error) (Ex_getMachinas_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getMachinas",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_getMachinas_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_getMachinas_Results_Future{Future: ans.Future()}, release

}

func (c Ex) GetExecutable(ctx context.Context, params func(Ex_getExecutable_Params) error) (Ex_getExecutable_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getExecutable",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_getExecutable_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_getExecutable_Results_Future{Future: ans.Future()}, release

}

func (c Ex) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex) String() string {
	return "Ex(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex) AddRef() Ex {
	return Ex(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex) DecodeFromPtr(p capnp.Ptr) Ex {
	return Ex(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex) IsSame(other Ex) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Server is a Ex with a local implementation.
type Ex_Server interface {
	GetMachinas(context.Context, Ex_getMachinas) error

	GetExecutable(context.Context, Ex_getExecutable) error
}

// Ex_NewServer creates a new Server from an implementation of Ex_Server.
func Ex_NewServer(s Ex_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Methods(nil, s), s, c)
}

// Ex_ServerToClient creates a new Client from an implementation of Ex_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_ServerToClient(s Ex_Server) Ex {
	return Ex(capnp.NewClient(Ex_NewServer(s)))
}

// Ex_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Methods(methods []server.Method, s Ex_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getMachinas",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetMachinas(ctx, Ex_getMachinas{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getExecutable",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetExecutable(ctx, Ex_getExecutable{call})
		},
	})

	return methods
}

// Ex_getMachinas holds the state for a server call to Ex.getMachinas.
// See server.Call for documentation.
type Ex_getMachinas struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_getMachinas) Args() Ex_getMachinas_Params {
	return Ex_getMachinas_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_getMachinas) AllocResults() (Ex_getMachinas_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getMachinas_Results(r), err
}

// Ex_getExecutable holds the state for a server call to Ex.getExecutable.
// See server.Call for documentation.
type Ex_getExecutable struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_getExecutable) Args() Ex_getExecutable_Params {
	return Ex_getExecutable_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_getExecutable) AllocResults() (Ex_getExecutable_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getExecutable_Results(r), err
}

// Ex_List is a list of Ex.
type Ex_List = capnp.CapList[Ex]

// NewEx creates a new list of Ex.
func NewEx_List(s *capnp.Segment, sz int32) (Ex_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex](l), err
}

type Ex_Machina capnp.Struct

// Ex_Machina_TypeID is the unique identifier for the type Ex_Machina.
const Ex_Machina_TypeID = 0x845e3b014cb99f7d

func NewEx_Machina(s *capnp.Segment) (Ex_Machina, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Machina(st), err
}

func NewRootEx_Machina(s *capnp.Segment) (Ex_Machina, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Machina(st), err
}

func ReadRootEx_Machina(msg *capnp.Message) (Ex_Machina, error) {
	root, err := msg.Root()
	return Ex_Machina(root.Struct()), err
}

func (s Ex_Machina) String() string {
	str, _ := text.Marshal(0x845e3b014cb99f7d, capnp.Struct(s))
	return str
}

func (s Ex_Machina) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Machina) DecodeFromPtr(p capnp.Ptr) Ex_Machina {
	return Ex_Machina(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Machina) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Machina) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Machina) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Machina) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Machina) Handle() Ex_Machina_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Machina_Handle(p.Interface().Client())
}

func (s Ex_Machina) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Machina) SetHandle(v Ex_Machina_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Ex_Machina) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Ex_Machina) HasVersion() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Machina) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Ex_Machina) SetVersion(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Ex_Machina) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Ex_Machina) HasAddress() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Ex_Machina) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Ex_Machina) SetAddress(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Ex_Machina_List is a list of Ex_Machina.
type Ex_Machina_List = capnp.StructList[Ex_Machina]

// NewEx_Machina creates a new list of Ex_Machina.
func NewEx_Machina_List(s *capnp.Segment, sz int32) (Ex_Machina_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Ex_Machina](l), err
}

// Ex_Machina_Future is a wrapper for a Ex_Machina promised by a client call.
type Ex_Machina_Future struct{ *capnp.Future }

func (f Ex_Machina_Future) Struct() (Ex_Machina, error) {
	p, err := f.Future.Ptr()
	return Ex_Machina(p.Struct()), err
}
func (p Ex_Machina_Future) Handle() Ex_Machina_Handle {
	return Ex_Machina_Handle(p.Future.Field(0, nil).Client())
}

type Ex_Machina_Handle capnp.Client

// Ex_Machina_Handle_TypeID is the unique identifier for the type Ex_Machina_Handle.
const Ex_Machina_Handle_TypeID = 0xf3e0ce36f43f5792

func (c Ex_Machina_Handle) GetProcesses(ctx context.Context, params func(Ex_Machina_Handle_getProcesses_Params) error) (Ex_Machina_Handle_getProcesses_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf3e0ce36f43f5792,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Machina.Handle",
			MethodName:    "getProcesses",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Machina_Handle_getProcesses_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Machina_Handle_getProcesses_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Machina_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex_Machina_Handle) String() string {
	return "Ex_Machina_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex_Machina_Handle) AddRef() Ex_Machina_Handle {
	return Ex_Machina_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex_Machina_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex_Machina_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex_Machina_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex_Machina_Handle) DecodeFromPtr(p capnp.Ptr) Ex_Machina_Handle {
	return Ex_Machina_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex_Machina_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex_Machina_Handle) IsSame(other Ex_Machina_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex_Machina_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex_Machina_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Machina_Handle_Server is a Ex_Machina_Handle with a local implementation.
type Ex_Machina_Handle_Server interface {
	GetProcesses(context.Context, Ex_Machina_Handle_getProcesses) error
}

// Ex_Machina_Handle_NewServer creates a new Server from an implementation of Ex_Machina_Handle_Server.
func Ex_Machina_Handle_NewServer(s Ex_Machina_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Machina_Handle_Methods(nil, s), s, c)
}

// Ex_Machina_Handle_ServerToClient creates a new Client from an implementation of Ex_Machina_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_Machina_Handle_ServerToClient(s Ex_Machina_Handle_Server) Ex_Machina_Handle {
	return Ex_Machina_Handle(capnp.NewClient(Ex_Machina_Handle_NewServer(s)))
}

// Ex_Machina_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Machina_Handle_Methods(methods []server.Method, s Ex_Machina_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf3e0ce36f43f5792,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Machina.Handle",
			MethodName:    "getProcesses",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetProcesses(ctx, Ex_Machina_Handle_getProcesses{call})
		},
	})

	return methods
}

// Ex_Machina_Handle_getProcesses holds the state for a server call to Ex_Machina_Handle.getProcesses.
// See server.Call for documentation.
type Ex_Machina_Handle_getProcesses struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Machina_Handle_getProcesses) Args() Ex_Machina_Handle_getProcesses_Params {
	return Ex_Machina_Handle_getProcesses_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Machina_Handle_getProcesses) AllocResults() (Ex_Machina_Handle_getProcesses_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Machina_Handle_getProcesses_Results(r), err
}

// Ex_Machina_Handle_List is a list of Ex_Machina_Handle.
type Ex_Machina_Handle_List = capnp.CapList[Ex_Machina_Handle]

// NewEx_Machina_Handle creates a new list of Ex_Machina_Handle.
func NewEx_Machina_Handle_List(s *capnp.Segment, sz int32) (Ex_Machina_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex_Machina_Handle](l), err
}

type Ex_Machina_Handle_getProcesses_Params capnp.Struct

// Ex_Machina_Handle_getProcesses_Params_TypeID is the unique identifier for the type Ex_Machina_Handle_getProcesses_Params.
const Ex_Machina_Handle_getProcesses_Params_TypeID = 0xa5a89f5e84d678b1

func NewEx_Machina_Handle_getProcesses_Params(s *capnp.Segment) (Ex_Machina_Handle_getProcesses_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Machina_Handle_getProcesses_Params(st), err
}

func NewRootEx_Machina_Handle_getProcesses_Params(s *capnp.Segment) (Ex_Machina_Handle_getProcesses_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Machina_Handle_getProcesses_Params(st), err
}

func ReadRootEx_Machina_Handle_getProcesses_Params(msg *capnp.Message) (Ex_Machina_Handle_getProcesses_Params, error) {
	root, err := msg.Root()
	return Ex_Machina_Handle_getProcesses_Params(root.Struct()), err
}

func (s Ex_Machina_Handle_getProcesses_Params) String() string {
	str, _ := text.Marshal(0xa5a89f5e84d678b1, capnp.Struct(s))
	return str
}

func (s Ex_Machina_Handle_getProcesses_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Machina_Handle_getProcesses_Params) DecodeFromPtr(p capnp.Ptr) Ex_Machina_Handle_getProcesses_Params {
	return Ex_Machina_Handle_getProcesses_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Machina_Handle_getProcesses_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Machina_Handle_getProcesses_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Machina_Handle_getProcesses_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Machina_Handle_getProcesses_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Machina_Handle_getProcesses_Params) Config() (Config, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Config(p.Struct()), err
}

func (s Ex_Machina_Handle_getProcesses_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Machina_Handle_getProcesses_Params) SetConfig(v Config) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewConfig sets the config field to a newly
// allocated Config struct, preferring placement in s's segment.
func (s Ex_Machina_Handle_getProcesses_Params) NewConfig() (Config, error) {
	ss, err := NewConfig(capnp.Struct(s).Segment())
	if err != nil {
		return Config{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Machina_Handle_getProcesses_Params_List is a list of Ex_Machina_Handle_getProcesses_Params.
type Ex_Machina_Handle_getProcesses_Params_List = capnp.StructList[Ex_Machina_Handle_getProcesses_Params]

// NewEx_Machina_Handle_getProcesses_Params creates a new list of Ex_Machina_Handle_getProcesses_Params.
func NewEx_Machina_Handle_getProcesses_Params_List(s *capnp.Segment, sz int32) (Ex_Machina_Handle_getProcesses_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Machina_Handle_getProcesses_Params](l), err
}

// Ex_Machina_Handle_getProcesses_Params_Future is a wrapper for a Ex_Machina_Handle_getProcesses_Params promised by a client call.
type Ex_Machina_Handle_getProcesses_Params_Future struct{ *capnp.Future }

func (f Ex_Machina_Handle_getProcesses_Params_Future) Struct() (Ex_Machina_Handle_getProcesses_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Machina_Handle_getProcesses_Params(p.Struct()), err
}
func (p Ex_Machina_Handle_getProcesses_Params_Future) Config() Config_Future {
	return Config_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Machina_Handle_getProcesses_Results capnp.Struct

// Ex_Machina_Handle_getProcesses_Results_TypeID is the unique identifier for the type Ex_Machina_Handle_getProcesses_Results.
const Ex_Machina_Handle_getProcesses_Results_TypeID = 0xbf37f2a05ed1cd63

func NewEx_Machina_Handle_getProcesses_Results(s *capnp.Segment) (Ex_Machina_Handle_getProcesses_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Machina_Handle_getProcesses_Results(st), err
}

func NewRootEx_Machina_Handle_getProcesses_Results(s *capnp.Segment) (Ex_Machina_Handle_getProcesses_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Machina_Handle_getProcesses_Results(st), err
}

func ReadRootEx_Machina_Handle_getProcesses_Results(msg *capnp.Message) (Ex_Machina_Handle_getProcesses_Results, error) {
	root, err := msg.Root()
	return Ex_Machina_Handle_getProcesses_Results(root.Struct()), err
}

func (s Ex_Machina_Handle_getProcesses_Results) String() string {
	str, _ := text.Marshal(0xbf37f2a05ed1cd63, capnp.Struct(s))
	return str
}

func (s Ex_Machina_Handle_getProcesses_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Machina_Handle_getProcesses_Results) DecodeFromPtr(p capnp.Ptr) Ex_Machina_Handle_getProcesses_Results {
	return Ex_Machina_Handle_getProcesses_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Machina_Handle_getProcesses_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Machina_Handle_getProcesses_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Machina_Handle_getProcesses_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Machina_Handle_getProcesses_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Machina_Handle_getProcesses_Results) Stream() Stream {
	p, _ := capnp.Struct(s).Ptr(0)
	return Stream(p.Interface().Client())
}

func (s Ex_Machina_Handle_getProcesses_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Machina_Handle_getProcesses_Results) SetStream(v Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_Machina_Handle_getProcesses_Results_List is a list of Ex_Machina_Handle_getProcesses_Results.
type Ex_Machina_Handle_getProcesses_Results_List = capnp.StructList[Ex_Machina_Handle_getProcesses_Results]

// NewEx_Machina_Handle_getProcesses_Results creates a new list of Ex_Machina_Handle_getProcesses_Results.
func NewEx_Machina_Handle_getProcesses_Results_List(s *capnp.Segment, sz int32) (Ex_Machina_Handle_getProcesses_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Machina_Handle_getProcesses_Results](l), err
}

// Ex_Machina_Handle_getProcesses_Results_Future is a wrapper for a Ex_Machina_Handle_getProcesses_Results promised by a client call.
type Ex_Machina_Handle_getProcesses_Results_Future struct{ *capnp.Future }

func (f Ex_Machina_Handle_getProcesses_Results_Future) Struct() (Ex_Machina_Handle_getProcesses_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Machina_Handle_getProcesses_Results(p.Struct()), err
}
func (p Ex_Machina_Handle_getProcesses_Results_Future) Stream() Stream {
	return Stream(p.Future.Field(0, nil).Client())
}

type Ex_Executable capnp.Struct

// Ex_Executable_TypeID is the unique identifier for the type Ex_Executable.
const Ex_Executable_TypeID = 0xbf39324c38e6c849

func NewEx_Executable(s *capnp.Segment) (Ex_Executable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Executable(st), err
}

func NewRootEx_Executable(s *capnp.Segment) (Ex_Executable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Executable(st), err
}

func ReadRootEx_Executable(msg *capnp.Message) (Ex_Executable, error) {
	root, err := msg.Root()
	return Ex_Executable(root.Struct()), err
}

func (s Ex_Executable) String() string {
	str, _ := text.Marshal(0xbf39324c38e6c849, capnp.Struct(s))
	return str
}

func (s Ex_Executable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Executable) DecodeFromPtr(p capnp.Ptr) Ex_Executable {
	return Ex_Executable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Executable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Executable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Executable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Executable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Executable) Handle() Ex_Executable_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Executable_Handle(p.Interface().Client())
}

func (s Ex_Executable) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Executable) SetHandle(v Ex_Executable_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_Executable_List is a list of Ex_Executable.
type Ex_Executable_List = capnp.StructList[Ex_Executable]

// NewEx_Executable creates a new list of Ex_Executable.
func NewEx_Executable_List(s *capnp.Segment, sz int32) (Ex_Executable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Executable](l), err
}

// Ex_Executable_Future is a wrapper for a Ex_Executable promised by a client call.
type Ex_Executable_Future struct{ *capnp.Future }

func (f Ex_Executable_Future) Struct() (Ex_Executable, error) {
	p, err := f.Future.Ptr()
	return Ex_Executable(p.Struct()), err
}
func (p Ex_Executable_Future) Handle() Ex_Executable_Handle {
	return Ex_Executable_Handle(p.Future.Field(0, nil).Client())
}

type Ex_Executable_Handle capnp.Client

// Ex_Executable_Handle_TypeID is the unique identifier for the type Ex_Executable_Handle.
const Ex_Executable_Handle_TypeID = 0x8109b8da721ce8c5

func (c Ex_Executable_Handle) GetDebug(ctx context.Context, params func(Ex_Executable_Handle_getDebug_Params) error) (Ex_Executable_Handle_getDebug_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8109b8da721ce8c5,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Executable.Handle",
			MethodName:    "getDebug",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Executable_Handle_getDebug_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Executable_Handle_getDebug_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Executable_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex_Executable_Handle) String() string {
	return "Ex_Executable_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex_Executable_Handle) AddRef() Ex_Executable_Handle {
	return Ex_Executable_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex_Executable_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex_Executable_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex_Executable_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex_Executable_Handle) DecodeFromPtr(p capnp.Ptr) Ex_Executable_Handle {
	return Ex_Executable_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex_Executable_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex_Executable_Handle) IsSame(other Ex_Executable_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex_Executable_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex_Executable_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Executable_Handle_Server is a Ex_Executable_Handle with a local implementation.
type Ex_Executable_Handle_Server interface {
	GetDebug(context.Context, Ex_Executable_Handle_getDebug) error
}

// Ex_Executable_Handle_NewServer creates a new Server from an implementation of Ex_Executable_Handle_Server.
func Ex_Executable_Handle_NewServer(s Ex_Executable_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Executable_Handle_Methods(nil, s), s, c)
}

// Ex_Executable_Handle_ServerToClient creates a new Client from an implementation of Ex_Executable_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_Executable_Handle_ServerToClient(s Ex_Executable_Handle_Server) Ex_Executable_Handle {
	return Ex_Executable_Handle(capnp.NewClient(Ex_Executable_Handle_NewServer(s)))
}

// Ex_Executable_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Executable_Handle_Methods(methods []server.Method, s Ex_Executable_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8109b8da721ce8c5,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Executable.Handle",
			MethodName:    "getDebug",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDebug(ctx, Ex_Executable_Handle_getDebug{call})
		},
	})

	return methods
}

// Ex_Executable_Handle_getDebug holds the state for a server call to Ex_Executable_Handle.getDebug.
// See server.Call for documentation.
type Ex_Executable_Handle_getDebug struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Executable_Handle_getDebug) Args() Ex_Executable_Handle_getDebug_Params {
	return Ex_Executable_Handle_getDebug_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Executable_Handle_getDebug) AllocResults() (Ex_Executable_Handle_getDebug_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Executable_Handle_getDebug_Results(r), err
}

// Ex_Executable_Handle_List is a list of Ex_Executable_Handle.
type Ex_Executable_Handle_List = capnp.CapList[Ex_Executable_Handle]

// NewEx_Executable_Handle creates a new list of Ex_Executable_Handle.
func NewEx_Executable_Handle_List(s *capnp.Segment, sz int32) (Ex_Executable_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex_Executable_Handle](l), err
}

type Ex_Executable_Handle_getDebug_Params capnp.Struct

// Ex_Executable_Handle_getDebug_Params_TypeID is the unique identifier for the type Ex_Executable_Handle_getDebug_Params.
const Ex_Executable_Handle_getDebug_Params_TypeID = 0xce72e863056ab4ad

func NewEx_Executable_Handle_getDebug_Params(s *capnp.Segment) (Ex_Executable_Handle_getDebug_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Executable_Handle_getDebug_Params(st), err
}

func NewRootEx_Executable_Handle_getDebug_Params(s *capnp.Segment) (Ex_Executable_Handle_getDebug_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Executable_Handle_getDebug_Params(st), err
}

func ReadRootEx_Executable_Handle_getDebug_Params(msg *capnp.Message) (Ex_Executable_Handle_getDebug_Params, error) {
	root, err := msg.Root()
	return Ex_Executable_Handle_getDebug_Params(root.Struct()), err
}

func (s Ex_Executable_Handle_getDebug_Params) String() string {
	str, _ := text.Marshal(0xce72e863056ab4ad, capnp.Struct(s))
	return str
}

func (s Ex_Executable_Handle_getDebug_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Executable_Handle_getDebug_Params) DecodeFromPtr(p capnp.Ptr) Ex_Executable_Handle_getDebug_Params {
	return Ex_Executable_Handle_getDebug_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Executable_Handle_getDebug_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Executable_Handle_getDebug_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Executable_Handle_getDebug_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Executable_Handle_getDebug_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ex_Executable_Handle_getDebug_Params_List is a list of Ex_Executable_Handle_getDebug_Params.
type Ex_Executable_Handle_getDebug_Params_List = capnp.StructList[Ex_Executable_Handle_getDebug_Params]

// NewEx_Executable_Handle_getDebug_Params creates a new list of Ex_Executable_Handle_getDebug_Params.
func NewEx_Executable_Handle_getDebug_Params_List(s *capnp.Segment, sz int32) (Ex_Executable_Handle_getDebug_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ex_Executable_Handle_getDebug_Params](l), err
}

// Ex_Executable_Handle_getDebug_Params_Future is a wrapper for a Ex_Executable_Handle_getDebug_Params promised by a client call.
type Ex_Executable_Handle_getDebug_Params_Future struct{ *capnp.Future }

func (f Ex_Executable_Handle_getDebug_Params_Future) Struct() (Ex_Executable_Handle_getDebug_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Executable_Handle_getDebug_Params(p.Struct()), err
}

type Ex_Executable_Handle_getDebug_Results capnp.Struct

// Ex_Executable_Handle_getDebug_Results_TypeID is the unique identifier for the type Ex_Executable_Handle_getDebug_Results.
const Ex_Executable_Handle_getDebug_Results_TypeID = 0x94b20ce1d03b93fb

func NewEx_Executable_Handle_getDebug_Results(s *capnp.Segment) (Ex_Executable_Handle_getDebug_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Executable_Handle_getDebug_Results(st), err
}

func NewRootEx_Executable_Handle_getDebug_Results(s *capnp.Segment) (Ex_Executable_Handle_getDebug_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Executable_Handle_getDebug_Results(st), err
}

func ReadRootEx_Executable_Handle_getDebug_Results(msg *capnp.Message) (Ex_Executable_Handle_getDebug_Results, error) {
	root, err := msg.Root()
	return Ex_Executable_Handle_getDebug_Results(root.Struct()), err
}

func (s Ex_Executable_Handle_getDebug_Results) String() string {
	str, _ := text.Marshal(0x94b20ce1d03b93fb, capnp.Struct(s))
	return str
}

func (s Ex_Executable_Handle_getDebug_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Executable_Handle_getDebug_Results) DecodeFromPtr(p capnp.Ptr) Ex_Executable_Handle_getDebug_Results {
	return Ex_Executable_Handle_getDebug_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Executable_Handle_getDebug_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Executable_Handle_getDebug_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Executable_Handle_getDebug_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Executable_Handle_getDebug_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Executable_Handle_getDebug_Results) Debug() (Ex_Debug, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug(p.Struct()), err
}

func (s Ex_Executable_Handle_getDebug_Results) HasDebug() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Executable_Handle_getDebug_Results) SetDebug(v Ex_Debug) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDebug sets the debug field to a newly
// allocated Ex_Debug struct, preferring placement in s's segment.
func (s Ex_Executable_Handle_getDebug_Results) NewDebug() (Ex_Debug, error) {
	ss, err := NewEx_Debug(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Executable_Handle_getDebug_Results_List is a list of Ex_Executable_Handle_getDebug_Results.
type Ex_Executable_Handle_getDebug_Results_List = capnp.StructList[Ex_Executable_Handle_getDebug_Results]

// NewEx_Executable_Handle_getDebug_Results creates a new list of Ex_Executable_Handle_getDebug_Results.
func NewEx_Executable_Handle_getDebug_Results_List(s *capnp.Segment, sz int32) (Ex_Executable_Handle_getDebug_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Executable_Handle_getDebug_Results](l), err
}

// Ex_Executable_Handle_getDebug_Results_Future is a wrapper for a Ex_Executable_Handle_getDebug_Results promised by a client call.
type Ex_Executable_Handle_getDebug_Results_Future struct{ *capnp.Future }

func (f Ex_Executable_Handle_getDebug_Results_Future) Struct() (Ex_Executable_Handle_getDebug_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Executable_Handle_getDebug_Results(p.Struct()), err
}
func (p Ex_Executable_Handle_getDebug_Results_Future) Debug() Ex_Debug_Future {
	return Ex_Debug_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Debug capnp.Struct

// Ex_Debug_TypeID is the unique identifier for the type Ex_Debug.
const Ex_Debug_TypeID = 0xa173b6208f4138e1

func NewEx_Debug(s *capnp.Segment) (Ex_Debug, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug(st), err
}

func NewRootEx_Debug(s *capnp.Segment) (Ex_Debug, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug(st), err
}

func ReadRootEx_Debug(msg *capnp.Message) (Ex_Debug, error) {
	root, err := msg.Root()
	return Ex_Debug(root.Struct()), err
}

func (s Ex_Debug) String() string {
	str, _ := text.Marshal(0xa173b6208f4138e1, capnp.Struct(s))
	return str
}

func (s Ex_Debug) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug) DecodeFromPtr(p capnp.Ptr) Ex_Debug {
	return Ex_Debug(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug) Handle() Ex_Debug_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle(p.Interface().Client())
}

func (s Ex_Debug) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug) SetHandle(v Ex_Debug_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_Debug_List is a list of Ex_Debug.
type Ex_Debug_List = capnp.StructList[Ex_Debug]

// NewEx_Debug creates a new list of Ex_Debug.
func NewEx_Debug_List(s *capnp.Segment, sz int32) (Ex_Debug_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug](l), err
}

// Ex_Debug_Future is a wrapper for a Ex_Debug promised by a client call.
type Ex_Debug_Future struct{ *capnp.Future }

func (f Ex_Debug_Future) Struct() (Ex_Debug, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug(p.Struct()), err
}
func (p Ex_Debug_Future) Handle() Ex_Debug_Handle {
	return Ex_Debug_Handle(p.Future.Field(0, nil).Client())
}

type Ex_Debug_Handle capnp.Client

// Ex_Debug_Handle_TypeID is the unique identifier for the type Ex_Debug_Handle.
const Ex_Debug_Handle_TypeID = 0x8ddce4178a77936e

func (c Ex_Debug_Handle) GetFunctions(ctx context.Context, params func(Ex_Debug_Handle_getFunctions_Params) error) (Ex_Debug_Handle_getFunctions_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getFunctions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_getFunctions_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_getFunctions_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle) GetFunction(ctx context.Context, params func(Ex_Debug_Handle_getFunction_Params) error) (Ex_Debug_Handle_getFunction_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getFunction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_getFunction_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_getFunction_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle) GetTypes(ctx context.Context, params func(Ex_Debug_Handle_getTypes_Params) error) (Ex_Debug_Handle_getTypes_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      2,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getTypes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_getTypes_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_getTypes_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle) GetType(ctx context.Context, params func(Ex_Debug_Handle_getType_Params) error) (Ex_Debug_Handle_getType_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      3,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getType",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_getType_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_getType_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex_Debug_Handle) String() string {
	return "Ex_Debug_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex_Debug_Handle) AddRef() Ex_Debug_Handle {
	return Ex_Debug_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex_Debug_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex_Debug_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex_Debug_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle {
	return Ex_Debug_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex_Debug_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex_Debug_Handle) IsSame(other Ex_Debug_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex_Debug_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex_Debug_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Debug_Handle_Server is a Ex_Debug_Handle with a local implementation.
type Ex_Debug_Handle_Server interface {
	GetFunctions(context.Context, Ex_Debug_Handle_getFunctions) error

	GetFunction(context.Context, Ex_Debug_Handle_getFunction) error

	GetTypes(context.Context, Ex_Debug_Handle_getTypes) error

	GetType(context.Context, Ex_Debug_Handle_getType) error
}

// Ex_Debug_Handle_NewServer creates a new Server from an implementation of Ex_Debug_Handle_Server.
func Ex_Debug_Handle_NewServer(s Ex_Debug_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Debug_Handle_Methods(nil, s), s, c)
}

// Ex_Debug_Handle_ServerToClient creates a new Client from an implementation of Ex_Debug_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_Debug_Handle_ServerToClient(s Ex_Debug_Handle_Server) Ex_Debug_Handle {
	return Ex_Debug_Handle(capnp.NewClient(Ex_Debug_Handle_NewServer(s)))
}

// Ex_Debug_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Debug_Handle_Methods(methods []server.Method, s Ex_Debug_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getFunctions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetFunctions(ctx, Ex_Debug_Handle_getFunctions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getFunction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetFunction(ctx, Ex_Debug_Handle_getFunction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      2,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getTypes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTypes(ctx, Ex_Debug_Handle_getTypes{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ddce4178a77936e,
			MethodID:      3,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle",
			MethodName:    "getType",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetType(ctx, Ex_Debug_Handle_getType{call})
		},
	})

	return methods
}

// Ex_Debug_Handle_getFunctions holds the state for a server call to Ex_Debug_Handle.getFunctions.
// See server.Call for documentation.
type Ex_Debug_Handle_getFunctions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_getFunctions) Args() Ex_Debug_Handle_getFunctions_Params {
	return Ex_Debug_Handle_getFunctions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_getFunctions) AllocResults() (Ex_Debug_Handle_getFunctions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunctions_Results(r), err
}

// Ex_Debug_Handle_getFunction holds the state for a server call to Ex_Debug_Handle.getFunction.
// See server.Call for documentation.
type Ex_Debug_Handle_getFunction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_getFunction) Args() Ex_Debug_Handle_getFunction_Params {
	return Ex_Debug_Handle_getFunction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_getFunction) AllocResults() (Ex_Debug_Handle_getFunction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunction_Results(r), err
}

// Ex_Debug_Handle_getTypes holds the state for a server call to Ex_Debug_Handle.getTypes.
// See server.Call for documentation.
type Ex_Debug_Handle_getTypes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_getTypes) Args() Ex_Debug_Handle_getTypes_Params {
	return Ex_Debug_Handle_getTypes_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_getTypes) AllocResults() (Ex_Debug_Handle_getTypes_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getTypes_Results(r), err
}

// Ex_Debug_Handle_getType holds the state for a server call to Ex_Debug_Handle.getType.
// See server.Call for documentation.
type Ex_Debug_Handle_getType struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_getType) Args() Ex_Debug_Handle_getType_Params {
	return Ex_Debug_Handle_getType_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_getType) AllocResults() (Ex_Debug_Handle_getType_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getType_Results(r), err
}

// Ex_Debug_Handle_List is a list of Ex_Debug_Handle.
type Ex_Debug_Handle_List = capnp.CapList[Ex_Debug_Handle]

// NewEx_Debug_Handle creates a new list of Ex_Debug_Handle.
func NewEx_Debug_Handle_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex_Debug_Handle](l), err
}

type Ex_Debug_Handle_Query capnp.Struct

// Ex_Debug_Handle_Query_TypeID is the unique identifier for the type Ex_Debug_Handle_Query.
const Ex_Debug_Handle_Query_TypeID = 0x844cbf3485f18bc7

func NewEx_Debug_Handle_Query(s *capnp.Segment) (Ex_Debug_Handle_Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Ex_Debug_Handle_Query(st), err
}

func NewRootEx_Debug_Handle_Query(s *capnp.Segment) (Ex_Debug_Handle_Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Ex_Debug_Handle_Query(st), err
}

func ReadRootEx_Debug_Handle_Query(msg *capnp.Message) (Ex_Debug_Handle_Query, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Query(root.Struct()), err
}

func (s Ex_Debug_Handle_Query) String() string {
	str, _ := text.Marshal(0x844cbf3485f18bc7, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Query) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Query) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Query {
	return Ex_Debug_Handle_Query(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Query) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Query) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Query) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Query) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Query) IncludeHandle() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Ex_Debug_Handle_Query) SetIncludeHandle(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Ex_Debug_Handle_Query) PreloadDepth() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Ex_Debug_Handle_Query) SetPreloadDepth(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Ex_Debug_Handle_Query) Filter() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ex_Debug_Handle_Query) HasFilter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Query) FilterBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_Query) SetFilter(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Ex_Debug_Handle_Query) Limit() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s Ex_Debug_Handle_Query) SetLimit(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// Ex_Debug_Handle_Query_List is a list of Ex_Debug_Handle_Query.
type Ex_Debug_Handle_Query_List = capnp.StructList[Ex_Debug_Handle_Query]

// NewEx_Debug_Handle_Query creates a new list of Ex_Debug_Handle_Query.
func NewEx_Debug_Handle_Query_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_Query](l), err
}

// Ex_Debug_Handle_Query_Future is a wrapper for a Ex_Debug_Handle_Query promised by a client call.
type Ex_Debug_Handle_Query_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Query_Future) Struct() (Ex_Debug_Handle_Query, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Query(p.Struct()), err
}

type Ex_Debug_Handle_Function capnp.Struct

// Ex_Debug_Handle_Function_TypeID is the unique identifier for the type Ex_Debug_Handle_Function.
const Ex_Debug_Handle_Function_TypeID = 0x9ac608ff7fa50c51

func NewEx_Debug_Handle_Function(s *capnp.Segment) (Ex_Debug_Handle_Function, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Function(st), err
}

func NewRootEx_Debug_Handle_Function(s *capnp.Segment) (Ex_Debug_Handle_Function, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Function(st), err
}

func ReadRootEx_Debug_Handle_Function(msg *capnp.Message) (Ex_Debug_Handle_Function, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function(root.Struct()), err
}

func (s Ex_Debug_Handle_Function) String() string {
	str, _ := text.Marshal(0x9ac608ff7fa50c51, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function {
	return Ex_Debug_Handle_Function(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Function) Handle() Ex_Debug_Handle_Function_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Function_Handle(p.Interface().Client())
}

func (s Ex_Debug_Handle_Function) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Function) SetHandle(v Ex_Debug_Handle_Function_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Ex_Debug_Handle_Function) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Ex_Debug_Handle_Function) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Debug_Handle_Function) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_Function) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Ex_Debug_Handle_Function) Detail() (Ex_Debug_Handle_Function_Detail, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Ex_Debug_Handle_Function_Detail(p.Struct()), err
}

func (s Ex_Debug_Handle_Function) HasDetail() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Ex_Debug_Handle_Function) SetDetail(v Ex_Debug_Handle_Function_Detail) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDetail sets the detail field to a newly
// allocated Ex_Debug_Handle_Function_Detail struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function) NewDetail() (Ex_Debug_Handle_Function_Detail, error) {
	ss, err := NewEx_Debug_Handle_Function_Detail(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Function_Detail{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_Function_List is a list of Ex_Debug_Handle_Function.
type Ex_Debug_Handle_Function_List = capnp.StructList[Ex_Debug_Handle_Function]

// NewEx_Debug_Handle_Function creates a new list of Ex_Debug_Handle_Function.
func NewEx_Debug_Handle_Function_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function](l), err
}

// Ex_Debug_Handle_Function_Future is a wrapper for a Ex_Debug_Handle_Function promised by a client call.
type Ex_Debug_Handle_Function_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Future) Struct() (Ex_Debug_Handle_Function, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function(p.Struct()), err
}
func (p Ex_Debug_Handle_Function_Future) Handle() Ex_Debug_Handle_Function_Handle {
	return Ex_Debug_Handle_Function_Handle(p.Future.Field(0, nil).Client())
}

func (p Ex_Debug_Handle_Function_Future) Detail() Ex_Debug_Handle_Function_Detail_Future {
	return Ex_Debug_Handle_Function_Detail_Future{Future: p.Future.Field(2, nil)}
}

type Ex_Debug_Handle_Function_Detail capnp.Struct

// Ex_Debug_Handle_Function_Detail_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Detail.
const Ex_Debug_Handle_Function_Detail_TypeID = 0xfb182d3ce5b55564

func NewEx_Debug_Handle_Function_Detail(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ex_Debug_Handle_Function_Detail(st), err
}

func NewRootEx_Debug_Handle_Function_Detail(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ex_Debug_Handle_Function_Detail(st), err
}

func ReadRootEx_Debug_Handle_Function_Detail(msg *capnp.Message) (Ex_Debug_Handle_Function_Detail, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function_Detail(root.Struct()), err
}

func (s Ex_Debug_Handle_Function_Detail) String() string {
	str, _ := text.Marshal(0xfb182d3ce5b55564, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function_Detail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Detail) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Detail {
	return Ex_Debug_Handle_Function_Detail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function_Detail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function_Detail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function_Detail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function_Detail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Function_Detail) FormalParameters() (Ex_Debug_Handle_Function_Detail_Variable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Function_Detail_Variable_List(p.List()), err
}

func (s Ex_Debug_Handle_Function_Detail) HasFormalParameters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Function_Detail) SetFormalParameters(v Ex_Debug_Handle_Function_Detail_Variable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFormalParameters sets the formalParameters field to a newly
// allocated Ex_Debug_Handle_Function_Detail_Variable_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function_Detail) NewFormalParameters(n int32) (Ex_Debug_Handle_Function_Detail_Variable_List, error) {
	l, err := NewEx_Debug_Handle_Function_Detail_Variable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Function_Detail_Variable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Ex_Debug_Handle_Function_Detail) Variables() (Ex_Debug_Handle_Function_Detail_Variable_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Ex_Debug_Handle_Function_Detail_Variable_List(p.List()), err
}

func (s Ex_Debug_Handle_Function_Detail) HasVariables() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Debug_Handle_Function_Detail) SetVariables(v Ex_Debug_Handle_Function_Detail_Variable_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVariables sets the variables field to a newly
// allocated Ex_Debug_Handle_Function_Detail_Variable_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function_Detail) NewVariables(n int32) (Ex_Debug_Handle_Function_Detail_Variable_List, error) {
	l, err := NewEx_Debug_Handle_Function_Detail_Variable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Function_Detail_Variable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Ex_Debug_Handle_Function_Detail_List is a list of Ex_Debug_Handle_Function_Detail.
type Ex_Debug_Handle_Function_Detail_List = capnp.StructList[Ex_Debug_Handle_Function_Detail]

// NewEx_Debug_Handle_Function_Detail creates a new list of Ex_Debug_Handle_Function_Detail.
func NewEx_Debug_Handle_Function_Detail_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Detail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function_Detail](l), err
}

// Ex_Debug_Handle_Function_Detail_Future is a wrapper for a Ex_Debug_Handle_Function_Detail promised by a client call.
type Ex_Debug_Handle_Function_Detail_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Detail_Future) Struct() (Ex_Debug_Handle_Function_Detail, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function_Detail(p.Struct()), err
}

type Ex_Debug_Handle_Function_Detail_Variable capnp.Struct

// Ex_Debug_Handle_Function_Detail_Variable_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Detail_Variable.
const Ex_Debug_Handle_Function_Detail_Variable_TypeID = 0xbf8ac61fd79e84bb

func NewEx_Debug_Handle_Function_Detail_Variable(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail_Variable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Function_Detail_Variable(st), err
}

func NewRootEx_Debug_Handle_Function_Detail_Variable(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail_Variable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Function_Detail_Variable(st), err
}

func ReadRootEx_Debug_Handle_Function_Detail_Variable(msg *capnp.Message) (Ex_Debug_Handle_Function_Detail_Variable, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function_Detail_Variable(root.Struct()), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) String() string {
	str, _ := text.Marshal(0xbf8ac61fd79e84bb, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function_Detail_Variable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Detail_Variable) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Detail_Variable {
	return Ex_Debug_Handle_Function_Detail_Variable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function_Detail_Variable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function_Detail_Variable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function_Detail_Variable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function_Detail_Variable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Function_Detail_Variable) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Function_Detail_Variable) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Ex_Debug_Handle_Function_Detail_Variable) Type() (Ex_Debug_Handle_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Ex_Debug_Handle_Type(p.Struct()), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Debug_Handle_Function_Detail_Variable) SetType(v Ex_Debug_Handle_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewType sets the type field to a newly
// allocated Ex_Debug_Handle_Type struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function_Detail_Variable) NewType() (Ex_Debug_Handle_Type, error) {
	ss, err := NewEx_Debug_Handle_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) Pcs() (Ex_Debug_Handle_Function_Detail_Variable_Range_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Ex_Debug_Handle_Function_Detail_Variable_Range_List(p.List()), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable) HasPcs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Ex_Debug_Handle_Function_Detail_Variable) SetPcs(v Ex_Debug_Handle_Function_Detail_Variable_Range_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPcs sets the pcs field to a newly
// allocated Ex_Debug_Handle_Function_Detail_Variable_Range_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function_Detail_Variable) NewPcs(n int32) (Ex_Debug_Handle_Function_Detail_Variable_Range_List, error) {
	l, err := NewEx_Debug_Handle_Function_Detail_Variable_Range_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Function_Detail_Variable_Range_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Ex_Debug_Handle_Function_Detail_Variable_List is a list of Ex_Debug_Handle_Function_Detail_Variable.
type Ex_Debug_Handle_Function_Detail_Variable_List = capnp.StructList[Ex_Debug_Handle_Function_Detail_Variable]

// NewEx_Debug_Handle_Function_Detail_Variable creates a new list of Ex_Debug_Handle_Function_Detail_Variable.
func NewEx_Debug_Handle_Function_Detail_Variable_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Detail_Variable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function_Detail_Variable](l), err
}

// Ex_Debug_Handle_Function_Detail_Variable_Future is a wrapper for a Ex_Debug_Handle_Function_Detail_Variable promised by a client call.
type Ex_Debug_Handle_Function_Detail_Variable_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Detail_Variable_Future) Struct() (Ex_Debug_Handle_Function_Detail_Variable, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function_Detail_Variable(p.Struct()), err
}
func (p Ex_Debug_Handle_Function_Detail_Variable_Future) Type() Ex_Debug_Handle_Type_Future {
	return Ex_Debug_Handle_Type_Future{Future: p.Future.Field(1, nil)}
}

type Ex_Debug_Handle_Function_Detail_Variable_Range capnp.Struct

// Ex_Debug_Handle_Function_Detail_Variable_Range_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Detail_Variable_Range.
const Ex_Debug_Handle_Function_Detail_Variable_Range_TypeID = 0xe292b64a77ec3277

func NewEx_Debug_Handle_Function_Detail_Variable_Range(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail_Variable_Range, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Ex_Debug_Handle_Function_Detail_Variable_Range(st), err
}

func NewRootEx_Debug_Handle_Function_Detail_Variable_Range(s *capnp.Segment) (Ex_Debug_Handle_Function_Detail_Variable_Range, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Ex_Debug_Handle_Function_Detail_Variable_Range(st), err
}

func ReadRootEx_Debug_Handle_Function_Detail_Variable_Range(msg *capnp.Message) (Ex_Debug_Handle_Function_Detail_Variable_Range, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function_Detail_Variable_Range(root.Struct()), err
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) String() string {
	str, _ := text.Marshal(0xe292b64a77ec3277, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Detail_Variable_Range) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Detail_Variable_Range {
	return Ex_Debug_Handle_Function_Detail_Variable_Range(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function_Detail_Variable_Range) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Function_Detail_Variable_Range) Start() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) SetStart(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) End() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Ex_Debug_Handle_Function_Detail_Variable_Range) SetEnd(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Ex_Debug_Handle_Function_Detail_Variable_Range_List is a list of Ex_Debug_Handle_Function_Detail_Variable_Range.
type Ex_Debug_Handle_Function_Detail_Variable_Range_List = capnp.StructList[Ex_Debug_Handle_Function_Detail_Variable_Range]

// NewEx_Debug_Handle_Function_Detail_Variable_Range creates a new list of Ex_Debug_Handle_Function_Detail_Variable_Range.
func NewEx_Debug_Handle_Function_Detail_Variable_Range_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Detail_Variable_Range_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function_Detail_Variable_Range](l), err
}

// Ex_Debug_Handle_Function_Detail_Variable_Range_Future is a wrapper for a Ex_Debug_Handle_Function_Detail_Variable_Range promised by a client call.
type Ex_Debug_Handle_Function_Detail_Variable_Range_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Detail_Variable_Range_Future) Struct() (Ex_Debug_Handle_Function_Detail_Variable_Range, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function_Detail_Variable_Range(p.Struct()), err
}

type Ex_Debug_Handle_Function_Handle capnp.Client

// Ex_Debug_Handle_Function_Handle_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Handle.
const Ex_Debug_Handle_Function_Handle_TypeID = 0xb609e173123eed47

func (c Ex_Debug_Handle_Function_Handle) GetDetail(ctx context.Context, params func(Ex_Debug_Handle_Function_Handle_getDetail_Params) error) (Ex_Debug_Handle_Function_Handle_getDetail_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb609e173123eed47,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle.Function.Handle",
			MethodName:    "getDetail",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_Function_Handle_getDetail_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_Function_Handle_getDetail_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle_Function_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex_Debug_Handle_Function_Handle) String() string {
	return "Ex_Debug_Handle_Function_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex_Debug_Handle_Function_Handle) AddRef() Ex_Debug_Handle_Function_Handle {
	return Ex_Debug_Handle_Function_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex_Debug_Handle_Function_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex_Debug_Handle_Function_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex_Debug_Handle_Function_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Handle) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Handle {
	return Ex_Debug_Handle_Function_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex_Debug_Handle_Function_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex_Debug_Handle_Function_Handle) IsSame(other Ex_Debug_Handle_Function_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex_Debug_Handle_Function_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex_Debug_Handle_Function_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Debug_Handle_Function_Handle_Server is a Ex_Debug_Handle_Function_Handle with a local implementation.
type Ex_Debug_Handle_Function_Handle_Server interface {
	GetDetail(context.Context, Ex_Debug_Handle_Function_Handle_getDetail) error
}

// Ex_Debug_Handle_Function_Handle_NewServer creates a new Server from an implementation of Ex_Debug_Handle_Function_Handle_Server.
func Ex_Debug_Handle_Function_Handle_NewServer(s Ex_Debug_Handle_Function_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Debug_Handle_Function_Handle_Methods(nil, s), s, c)
}

// Ex_Debug_Handle_Function_Handle_ServerToClient creates a new Client from an implementation of Ex_Debug_Handle_Function_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_Debug_Handle_Function_Handle_ServerToClient(s Ex_Debug_Handle_Function_Handle_Server) Ex_Debug_Handle_Function_Handle {
	return Ex_Debug_Handle_Function_Handle(capnp.NewClient(Ex_Debug_Handle_Function_Handle_NewServer(s)))
}

// Ex_Debug_Handle_Function_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Debug_Handle_Function_Handle_Methods(methods []server.Method, s Ex_Debug_Handle_Function_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb609e173123eed47,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle.Function.Handle",
			MethodName:    "getDetail",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDetail(ctx, Ex_Debug_Handle_Function_Handle_getDetail{call})
		},
	})

	return methods
}

// Ex_Debug_Handle_Function_Handle_getDetail holds the state for a server call to Ex_Debug_Handle_Function_Handle.getDetail.
// See server.Call for documentation.
type Ex_Debug_Handle_Function_Handle_getDetail struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_Function_Handle_getDetail) Args() Ex_Debug_Handle_Function_Handle_getDetail_Params {
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_Function_Handle_getDetail) AllocResults() (Ex_Debug_Handle_Function_Handle_getDetail_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(r), err
}

// Ex_Debug_Handle_Function_Handle_List is a list of Ex_Debug_Handle_Function_Handle.
type Ex_Debug_Handle_Function_Handle_List = capnp.CapList[Ex_Debug_Handle_Function_Handle]

// NewEx_Debug_Handle_Function_Handle creates a new list of Ex_Debug_Handle_Function_Handle.
func NewEx_Debug_Handle_Function_Handle_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex_Debug_Handle_Function_Handle](l), err
}

type Ex_Debug_Handle_Function_Handle_getDetail_Params capnp.Struct

// Ex_Debug_Handle_Function_Handle_getDetail_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Handle_getDetail_Params.
const Ex_Debug_Handle_Function_Handle_getDetail_Params_TypeID = 0xb2a52ed3317d85eb

func NewEx_Debug_Handle_Function_Handle_getDetail_Params(s *capnp.Segment) (Ex_Debug_Handle_Function_Handle_getDetail_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(st), err
}

func NewRootEx_Debug_Handle_Function_Handle_getDetail_Params(s *capnp.Segment) (Ex_Debug_Handle_Function_Handle_getDetail_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(st), err
}

func ReadRootEx_Debug_Handle_Function_Handle_getDetail_Params(msg *capnp.Message) (Ex_Debug_Handle_Function_Handle_getDetail_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) String() string {
	str, _ := text.Marshal(0xb2a52ed3317d85eb, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Handle_getDetail_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Handle_getDetail_Params {
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ex_Debug_Handle_Function_Handle_getDetail_Params_List is a list of Ex_Debug_Handle_Function_Handle_getDetail_Params.
type Ex_Debug_Handle_Function_Handle_getDetail_Params_List = capnp.StructList[Ex_Debug_Handle_Function_Handle_getDetail_Params]

// NewEx_Debug_Handle_Function_Handle_getDetail_Params creates a new list of Ex_Debug_Handle_Function_Handle_getDetail_Params.
func NewEx_Debug_Handle_Function_Handle_getDetail_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Handle_getDetail_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function_Handle_getDetail_Params](l), err
}

// Ex_Debug_Handle_Function_Handle_getDetail_Params_Future is a wrapper for a Ex_Debug_Handle_Function_Handle_getDetail_Params promised by a client call.
type Ex_Debug_Handle_Function_Handle_getDetail_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Handle_getDetail_Params_Future) Struct() (Ex_Debug_Handle_Function_Handle_getDetail_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function_Handle_getDetail_Params(p.Struct()), err
}

type Ex_Debug_Handle_Function_Handle_getDetail_Results capnp.Struct

// Ex_Debug_Handle_Function_Handle_getDetail_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_Function_Handle_getDetail_Results.
const Ex_Debug_Handle_Function_Handle_getDetail_Results_TypeID = 0xcd9b2c8b9a9ddf2a

func NewEx_Debug_Handle_Function_Handle_getDetail_Results(s *capnp.Segment) (Ex_Debug_Handle_Function_Handle_getDetail_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(st), err
}

func NewRootEx_Debug_Handle_Function_Handle_getDetail_Results(s *capnp.Segment) (Ex_Debug_Handle_Function_Handle_getDetail_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(st), err
}

func ReadRootEx_Debug_Handle_Function_Handle_getDetail_Results(msg *capnp.Message) (Ex_Debug_Handle_Function_Handle_getDetail_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) String() string {
	str, _ := text.Marshal(0xcd9b2c8b9a9ddf2a, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Function_Handle_getDetail_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Function_Handle_getDetail_Results {
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) Detail() (Ex_Debug_Handle_Function_Detail, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Function_Detail(p.Struct()), err
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) HasDetail() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) SetDetail(v Ex_Debug_Handle_Function_Detail) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDetail sets the detail field to a newly
// allocated Ex_Debug_Handle_Function_Detail struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Function_Handle_getDetail_Results) NewDetail() (Ex_Debug_Handle_Function_Detail, error) {
	ss, err := NewEx_Debug_Handle_Function_Detail(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Function_Detail{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_Function_Handle_getDetail_Results_List is a list of Ex_Debug_Handle_Function_Handle_getDetail_Results.
type Ex_Debug_Handle_Function_Handle_getDetail_Results_List = capnp.StructList[Ex_Debug_Handle_Function_Handle_getDetail_Results]

// NewEx_Debug_Handle_Function_Handle_getDetail_Results creates a new list of Ex_Debug_Handle_Function_Handle_getDetail_Results.
func NewEx_Debug_Handle_Function_Handle_getDetail_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Function_Handle_getDetail_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_Function_Handle_getDetail_Results](l), err
}

// Ex_Debug_Handle_Function_Handle_getDetail_Results_Future is a wrapper for a Ex_Debug_Handle_Function_Handle_getDetail_Results promised by a client call.
type Ex_Debug_Handle_Function_Handle_getDetail_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Function_Handle_getDetail_Results_Future) Struct() (Ex_Debug_Handle_Function_Handle_getDetail_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Function_Handle_getDetail_Results(p.Struct()), err
}
func (p Ex_Debug_Handle_Function_Handle_getDetail_Results_Future) Detail() Ex_Debug_Handle_Function_Detail_Future {
	return Ex_Debug_Handle_Function_Detail_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Debug_Handle_Type capnp.Struct

// Ex_Debug_Handle_Type_TypeID is the unique identifier for the type Ex_Debug_Handle_Type.
const Ex_Debug_Handle_Type_TypeID = 0xc7958d702fc82501

func NewEx_Debug_Handle_Type(s *capnp.Segment) (Ex_Debug_Handle_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Type(st), err
}

func NewRootEx_Debug_Handle_Type(s *capnp.Segment) (Ex_Debug_Handle_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Ex_Debug_Handle_Type(st), err
}

func ReadRootEx_Debug_Handle_Type(msg *capnp.Message) (Ex_Debug_Handle_Type, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Type(root.Struct()), err
}

func (s Ex_Debug_Handle_Type) String() string {
	str, _ := text.Marshal(0xc7958d702fc82501, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type {
	return Ex_Debug_Handle_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type) Handle() Ex_Debug_Handle_Type_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Type_Handle(p.Interface().Client())
}

func (s Ex_Debug_Handle_Type) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Type) SetHandle(v Ex_Debug_Handle_Type_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Ex_Debug_Handle_Type) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Ex_Debug_Handle_Type) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Debug_Handle_Type) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_Type) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Ex_Debug_Handle_Type) Detail() (Ex_Debug_Handle_Type_Detail, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Ex_Debug_Handle_Type_Detail(p.Struct()), err
}

func (s Ex_Debug_Handle_Type) HasDetail() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Ex_Debug_Handle_Type) SetDetail(v Ex_Debug_Handle_Type_Detail) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDetail sets the detail field to a newly
// allocated Ex_Debug_Handle_Type_Detail struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Type) NewDetail() (Ex_Debug_Handle_Type_Detail, error) {
	ss, err := NewEx_Debug_Handle_Type_Detail(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Type_Detail{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_Type_List is a list of Ex_Debug_Handle_Type.
type Ex_Debug_Handle_Type_List = capnp.StructList[Ex_Debug_Handle_Type]

// NewEx_Debug_Handle_Type creates a new list of Ex_Debug_Handle_Type.
func NewEx_Debug_Handle_Type_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Ex_Debug_Handle_Type](l), err
}

// Ex_Debug_Handle_Type_Future is a wrapper for a Ex_Debug_Handle_Type promised by a client call.
type Ex_Debug_Handle_Type_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Future) Struct() (Ex_Debug_Handle_Type, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type(p.Struct()), err
}
func (p Ex_Debug_Handle_Type_Future) Handle() Ex_Debug_Handle_Type_Handle {
	return Ex_Debug_Handle_Type_Handle(p.Future.Field(0, nil).Client())
}

func (p Ex_Debug_Handle_Type_Future) Detail() Ex_Debug_Handle_Type_Detail_Future {
	return Ex_Debug_Handle_Type_Detail_Future{Future: p.Future.Field(2, nil)}
}

type Ex_Debug_Handle_Type_Detail capnp.Struct

// Ex_Debug_Handle_Type_Detail_TypeID is the unique identifier for the type Ex_Debug_Handle_Type_Detail.
const Ex_Debug_Handle_Type_Detail_TypeID = 0x952b879acd0b9e34

func NewEx_Debug_Handle_Type_Detail(s *capnp.Segment) (Ex_Debug_Handle_Type_Detail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Type_Detail(st), err
}

func NewRootEx_Debug_Handle_Type_Detail(s *capnp.Segment) (Ex_Debug_Handle_Type_Detail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Type_Detail(st), err
}

func ReadRootEx_Debug_Handle_Type_Detail(msg *capnp.Message) (Ex_Debug_Handle_Type_Detail, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Type_Detail(root.Struct()), err
}

func (s Ex_Debug_Handle_Type_Detail) String() string {
	str, _ := text.Marshal(0x952b879acd0b9e34, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Type_Detail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type_Detail) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type_Detail {
	return Ex_Debug_Handle_Type_Detail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Type_Detail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Type_Detail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Detail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Detail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type_Detail) Fields() (Ex_Debug_Handle_Type_Detail_Field_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Type_Detail_Field_List(p.List()), err
}

func (s Ex_Debug_Handle_Type_Detail) HasFields() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Type_Detail) SetFields(v Ex_Debug_Handle_Type_Detail_Field_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFields sets the fields field to a newly
// allocated Ex_Debug_Handle_Type_Detail_Field_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_Type_Detail) NewFields(n int32) (Ex_Debug_Handle_Type_Detail_Field_List, error) {
	l, err := NewEx_Debug_Handle_Type_Detail_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Type_Detail_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Ex_Debug_Handle_Type_Detail_List is a list of Ex_Debug_Handle_Type_Detail.
type Ex_Debug_Handle_Type_Detail_List = capnp.StructList[Ex_Debug_Handle_Type_Detail]

// NewEx_Debug_Handle_Type_Detail creates a new list of Ex_Debug_Handle_Type_Detail.
func NewEx_Debug_Handle_Type_Detail_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_Detail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_Type_Detail](l), err
}

// Ex_Debug_Handle_Type_Detail_Future is a wrapper for a Ex_Debug_Handle_Type_Detail promised by a client call.
type Ex_Debug_Handle_Type_Detail_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Detail_Future) Struct() (Ex_Debug_Handle_Type_Detail, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Detail(p.Struct()), err
}

type Ex_Debug_Handle_Type_Detail_Field capnp.Struct
type Ex_Debug_Handle_Type_Detail_Field_go Ex_Debug_Handle_Type_Detail_Field
type Ex_Debug_Handle_Type_Detail_Field_rust Ex_Debug_Handle_Type_Detail_Field
type Ex_Debug_Handle_Type_Detail_Field_Which uint16

const (
	Ex_Debug_Handle_Type_Detail_Field_Which_go   Ex_Debug_Handle_Type_Detail_Field_Which = 0
	Ex_Debug_Handle_Type_Detail_Field_Which_rust Ex_Debug_Handle_Type_Detail_Field_Which = 1
)

func (w Ex_Debug_Handle_Type_Detail_Field_Which) String() string {
	const s = "gorust"
	switch w {
	case Ex_Debug_Handle_Type_Detail_Field_Which_go:
		return s[0:2]
	case Ex_Debug_Handle_Type_Detail_Field_Which_rust:
		return s[2:6]

	}
	return "Ex_Debug_Handle_Type_Detail_Field_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Ex_Debug_Handle_Type_Detail_Field_TypeID is the unique identifier for the type Ex_Debug_Handle_Type_Detail_Field.
const Ex_Debug_Handle_Type_Detail_Field_TypeID = 0xffbf40d1d673143a

func NewEx_Debug_Handle_Type_Detail_Field(s *capnp.Segment) (Ex_Debug_Handle_Type_Detail_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Ex_Debug_Handle_Type_Detail_Field(st), err
}

func NewRootEx_Debug_Handle_Type_Detail_Field(s *capnp.Segment) (Ex_Debug_Handle_Type_Detail_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Ex_Debug_Handle_Type_Detail_Field(st), err
}

func ReadRootEx_Debug_Handle_Type_Detail_Field(msg *capnp.Message) (Ex_Debug_Handle_Type_Detail_Field, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Type_Detail_Field(root.Struct()), err
}

func (s Ex_Debug_Handle_Type_Detail_Field) String() string {
	str, _ := text.Marshal(0xffbf40d1d673143a, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Type_Detail_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type_Detail_Field) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type_Detail_Field {
	return Ex_Debug_Handle_Type_Detail_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Type_Detail_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Ex_Debug_Handle_Type_Detail_Field) Which() Ex_Debug_Handle_Type_Detail_Field_Which {
	return Ex_Debug_Handle_Type_Detail_Field_Which(capnp.Struct(s).Uint16(2))
}
func (s Ex_Debug_Handle_Type_Detail_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Detail_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Detail_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type_Detail_Field) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ex_Debug_Handle_Type_Detail_Field) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Type_Detail_Field) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_Type_Detail_Field) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Ex_Debug_Handle_Type_Detail_Field) Type() (Ex_Debug_Handle_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Ex_Debug_Handle_Type(p.Struct()), err
}

func (s Ex_Debug_Handle_Type_Detail_Field) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Ex_Debug_Handle_Type_Detail_Field) SetType(v Ex_Debug_Handle_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewType sets the type field to a newly
// allocated Ex_Debug_Handle_Type struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Type_Detail_Field) NewType() (Ex_Debug_Handle_Type, error) {
	ss, err := NewEx_Debug_Handle_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Ex_Debug_Handle_Type_Detail_Field) Go() Ex_Debug_Handle_Type_Detail_Field_go {
	return Ex_Debug_Handle_Type_Detail_Field_go(s)
}

func (s Ex_Debug_Handle_Type_Detail_Field) SetGo() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Ex_Debug_Handle_Type_Detail_Field_go) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Detail_Field_go) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Detail_Field_go) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type_Detail_Field_go) Embedded() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Ex_Debug_Handle_Type_Detail_Field_go) SetEmbedded(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Ex_Debug_Handle_Type_Detail_Field) Rust() Ex_Debug_Handle_Type_Detail_Field_rust {
	return Ex_Debug_Handle_Type_Detail_Field_rust(s)
}

func (s Ex_Debug_Handle_Type_Detail_Field) SetRust() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Ex_Debug_Handle_Type_Detail_Field_rust) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Detail_Field_rust) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Detail_Field_rust) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type_Detail_Field_rust) Placeholder() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Ex_Debug_Handle_Type_Detail_Field_rust) SetPlaceholder(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

// Ex_Debug_Handle_Type_Detail_Field_List is a list of Ex_Debug_Handle_Type_Detail_Field.
type Ex_Debug_Handle_Type_Detail_Field_List = capnp.StructList[Ex_Debug_Handle_Type_Detail_Field]

// NewEx_Debug_Handle_Type_Detail_Field creates a new list of Ex_Debug_Handle_Type_Detail_Field.
func NewEx_Debug_Handle_Type_Detail_Field_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_Detail_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Ex_Debug_Handle_Type_Detail_Field](l), err
}

// Ex_Debug_Handle_Type_Detail_Field_Future is a wrapper for a Ex_Debug_Handle_Type_Detail_Field promised by a client call.
type Ex_Debug_Handle_Type_Detail_Field_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Detail_Field_Future) Struct() (Ex_Debug_Handle_Type_Detail_Field, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Detail_Field(p.Struct()), err
}
func (p Ex_Debug_Handle_Type_Detail_Field_Future) Type() Ex_Debug_Handle_Type_Future {
	return Ex_Debug_Handle_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Ex_Debug_Handle_Type_Detail_Field_Future) Go() Ex_Debug_Handle_Type_Detail_Field_go_Future {
	return Ex_Debug_Handle_Type_Detail_Field_go_Future{p.Future}
}

// Ex_Debug_Handle_Type_Detail_Field_go_Future is a wrapper for a Ex_Debug_Handle_Type_Detail_Field_go promised by a client call.
type Ex_Debug_Handle_Type_Detail_Field_go_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Detail_Field_go_Future) Struct() (Ex_Debug_Handle_Type_Detail_Field_go, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Detail_Field_go(p.Struct()), err
}
func (p Ex_Debug_Handle_Type_Detail_Field_Future) Rust() Ex_Debug_Handle_Type_Detail_Field_rust_Future {
	return Ex_Debug_Handle_Type_Detail_Field_rust_Future{p.Future}
}

// Ex_Debug_Handle_Type_Detail_Field_rust_Future is a wrapper for a Ex_Debug_Handle_Type_Detail_Field_rust promised by a client call.
type Ex_Debug_Handle_Type_Detail_Field_rust_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Detail_Field_rust_Future) Struct() (Ex_Debug_Handle_Type_Detail_Field_rust, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Detail_Field_rust(p.Struct()), err
}

type Ex_Debug_Handle_Type_Handle capnp.Client

// Ex_Debug_Handle_Type_Handle_TypeID is the unique identifier for the type Ex_Debug_Handle_Type_Handle.
const Ex_Debug_Handle_Type_Handle_TypeID = 0xc0104a5c052c0c9b

func (c Ex_Debug_Handle_Type_Handle) GetDetail(ctx context.Context, params func(Ex_Debug_Handle_Type_Handle_getDetail_Params) error) (Ex_Debug_Handle_Type_Handle_getDetail_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0104a5c052c0c9b,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle.Type.Handle",
			MethodName:    "getDetail",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Debug_Handle_Type_Handle_getDetail_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Debug_Handle_Type_Handle_getDetail_Results_Future{Future: ans.Future()}, release

}

func (c Ex_Debug_Handle_Type_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ex_Debug_Handle_Type_Handle) String() string {
	return "Ex_Debug_Handle_Type_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ex_Debug_Handle_Type_Handle) AddRef() Ex_Debug_Handle_Type_Handle {
	return Ex_Debug_Handle_Type_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ex_Debug_Handle_Type_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ex_Debug_Handle_Type_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ex_Debug_Handle_Type_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type_Handle) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type_Handle {
	return Ex_Debug_Handle_Type_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ex_Debug_Handle_Type_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ex_Debug_Handle_Type_Handle) IsSame(other Ex_Debug_Handle_Type_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ex_Debug_Handle_Type_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ex_Debug_Handle_Type_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ex_Debug_Handle_Type_Handle_Server is a Ex_Debug_Handle_Type_Handle with a local implementation.
type Ex_Debug_Handle_Type_Handle_Server interface {
	GetDetail(context.Context, Ex_Debug_Handle_Type_Handle_getDetail) error
}

// Ex_Debug_Handle_Type_Handle_NewServer creates a new Server from an implementation of Ex_Debug_Handle_Type_Handle_Server.
func Ex_Debug_Handle_Type_Handle_NewServer(s Ex_Debug_Handle_Type_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ex_Debug_Handle_Type_Handle_Methods(nil, s), s, c)
}

// Ex_Debug_Handle_Type_Handle_ServerToClient creates a new Client from an implementation of Ex_Debug_Handle_Type_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Ex_Debug_Handle_Type_Handle_ServerToClient(s Ex_Debug_Handle_Type_Handle_Server) Ex_Debug_Handle_Type_Handle {
	return Ex_Debug_Handle_Type_Handle(capnp.NewClient(Ex_Debug_Handle_Type_Handle_NewServer(s)))
}

// Ex_Debug_Handle_Type_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ex_Debug_Handle_Type_Handle_Methods(methods []server.Method, s Ex_Debug_Handle_Type_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0104a5c052c0c9b,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Debug.Handle.Type.Handle",
			MethodName:    "getDetail",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDetail(ctx, Ex_Debug_Handle_Type_Handle_getDetail{call})
		},
	})

	return methods
}

// Ex_Debug_Handle_Type_Handle_getDetail holds the state for a server call to Ex_Debug_Handle_Type_Handle.getDetail.
// See server.Call for documentation.
type Ex_Debug_Handle_Type_Handle_getDetail struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ex_Debug_Handle_Type_Handle_getDetail) Args() Ex_Debug_Handle_Type_Handle_getDetail_Params {
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ex_Debug_Handle_Type_Handle_getDetail) AllocResults() (Ex_Debug_Handle_Type_Handle_getDetail_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(r), err
}

// Ex_Debug_Handle_Type_Handle_List is a list of Ex_Debug_Handle_Type_Handle.
type Ex_Debug_Handle_Type_Handle_List = capnp.CapList[Ex_Debug_Handle_Type_Handle]

// NewEx_Debug_Handle_Type_Handle creates a new list of Ex_Debug_Handle_Type_Handle.
func NewEx_Debug_Handle_Type_Handle_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ex_Debug_Handle_Type_Handle](l), err
}

type Ex_Debug_Handle_Type_Handle_getDetail_Params capnp.Struct

// Ex_Debug_Handle_Type_Handle_getDetail_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_Type_Handle_getDetail_Params.
const Ex_Debug_Handle_Type_Handle_getDetail_Params_TypeID = 0xd8e5d27359a5c39a

func NewEx_Debug_Handle_Type_Handle_getDetail_Params(s *capnp.Segment) (Ex_Debug_Handle_Type_Handle_getDetail_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(st), err
}

func NewRootEx_Debug_Handle_Type_Handle_getDetail_Params(s *capnp.Segment) (Ex_Debug_Handle_Type_Handle_getDetail_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(st), err
}

func ReadRootEx_Debug_Handle_Type_Handle_getDetail_Params(msg *capnp.Message) (Ex_Debug_Handle_Type_Handle_getDetail_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) String() string {
	str, _ := text.Marshal(0xd8e5d27359a5c39a, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type_Handle_getDetail_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type_Handle_getDetail_Params {
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ex_Debug_Handle_Type_Handle_getDetail_Params_List is a list of Ex_Debug_Handle_Type_Handle_getDetail_Params.
type Ex_Debug_Handle_Type_Handle_getDetail_Params_List = capnp.StructList[Ex_Debug_Handle_Type_Handle_getDetail_Params]

// NewEx_Debug_Handle_Type_Handle_getDetail_Params creates a new list of Ex_Debug_Handle_Type_Handle_getDetail_Params.
func NewEx_Debug_Handle_Type_Handle_getDetail_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_Handle_getDetail_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ex_Debug_Handle_Type_Handle_getDetail_Params](l), err
}

// Ex_Debug_Handle_Type_Handle_getDetail_Params_Future is a wrapper for a Ex_Debug_Handle_Type_Handle_getDetail_Params promised by a client call.
type Ex_Debug_Handle_Type_Handle_getDetail_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Handle_getDetail_Params_Future) Struct() (Ex_Debug_Handle_Type_Handle_getDetail_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Handle_getDetail_Params(p.Struct()), err
}

type Ex_Debug_Handle_Type_Handle_getDetail_Results capnp.Struct

// Ex_Debug_Handle_Type_Handle_getDetail_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_Type_Handle_getDetail_Results.
const Ex_Debug_Handle_Type_Handle_getDetail_Results_TypeID = 0xf0305efa63474bb1

func NewEx_Debug_Handle_Type_Handle_getDetail_Results(s *capnp.Segment) (Ex_Debug_Handle_Type_Handle_getDetail_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(st), err
}

func NewRootEx_Debug_Handle_Type_Handle_getDetail_Results(s *capnp.Segment) (Ex_Debug_Handle_Type_Handle_getDetail_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(st), err
}

func ReadRootEx_Debug_Handle_Type_Handle_getDetail_Results(msg *capnp.Message) (Ex_Debug_Handle_Type_Handle_getDetail_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) String() string {
	str, _ := text.Marshal(0xf0305efa63474bb1, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_Type_Handle_getDetail_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_Type_Handle_getDetail_Results {
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) Detail() (Ex_Debug_Handle_Type_Detail, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Type_Detail(p.Struct()), err
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) HasDetail() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) SetDetail(v Ex_Debug_Handle_Type_Detail) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDetail sets the detail field to a newly
// allocated Ex_Debug_Handle_Type_Detail struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_Type_Handle_getDetail_Results) NewDetail() (Ex_Debug_Handle_Type_Detail, error) {
	ss, err := NewEx_Debug_Handle_Type_Detail(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Type_Detail{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_Type_Handle_getDetail_Results_List is a list of Ex_Debug_Handle_Type_Handle_getDetail_Results.
type Ex_Debug_Handle_Type_Handle_getDetail_Results_List = capnp.StructList[Ex_Debug_Handle_Type_Handle_getDetail_Results]

// NewEx_Debug_Handle_Type_Handle_getDetail_Results creates a new list of Ex_Debug_Handle_Type_Handle_getDetail_Results.
func NewEx_Debug_Handle_Type_Handle_getDetail_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_Type_Handle_getDetail_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_Type_Handle_getDetail_Results](l), err
}

// Ex_Debug_Handle_Type_Handle_getDetail_Results_Future is a wrapper for a Ex_Debug_Handle_Type_Handle_getDetail_Results promised by a client call.
type Ex_Debug_Handle_Type_Handle_getDetail_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_Type_Handle_getDetail_Results_Future) Struct() (Ex_Debug_Handle_Type_Handle_getDetail_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_Type_Handle_getDetail_Results(p.Struct()), err
}
func (p Ex_Debug_Handle_Type_Handle_getDetail_Results_Future) Detail() Ex_Debug_Handle_Type_Detail_Future {
	return Ex_Debug_Handle_Type_Detail_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Debug_Handle_getFunctions_Params capnp.Struct

// Ex_Debug_Handle_getFunctions_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_getFunctions_Params.
const Ex_Debug_Handle_getFunctions_Params_TypeID = 0xe58a6dcabeab86b8

func NewEx_Debug_Handle_getFunctions_Params(s *capnp.Segment) (Ex_Debug_Handle_getFunctions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunctions_Params(st), err
}

func NewRootEx_Debug_Handle_getFunctions_Params(s *capnp.Segment) (Ex_Debug_Handle_getFunctions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunctions_Params(st), err
}

func ReadRootEx_Debug_Handle_getFunctions_Params(msg *capnp.Message) (Ex_Debug_Handle_getFunctions_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getFunctions_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_getFunctions_Params) String() string {
	str, _ := text.Marshal(0xe58a6dcabeab86b8, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getFunctions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getFunctions_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getFunctions_Params {
	return Ex_Debug_Handle_getFunctions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getFunctions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getFunctions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getFunctions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getFunctions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getFunctions_Params) Query() (Ex_Debug_Handle_Query, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Query(p.Struct()), err
}

func (s Ex_Debug_Handle_getFunctions_Params) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getFunctions_Params) SetQuery(v Ex_Debug_Handle_Query) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Ex_Debug_Handle_Query struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_getFunctions_Params) NewQuery() (Ex_Debug_Handle_Query, error) {
	ss, err := NewEx_Debug_Handle_Query(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Query{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_getFunctions_Params_List is a list of Ex_Debug_Handle_getFunctions_Params.
type Ex_Debug_Handle_getFunctions_Params_List = capnp.StructList[Ex_Debug_Handle_getFunctions_Params]

// NewEx_Debug_Handle_getFunctions_Params creates a new list of Ex_Debug_Handle_getFunctions_Params.
func NewEx_Debug_Handle_getFunctions_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getFunctions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getFunctions_Params](l), err
}

// Ex_Debug_Handle_getFunctions_Params_Future is a wrapper for a Ex_Debug_Handle_getFunctions_Params promised by a client call.
type Ex_Debug_Handle_getFunctions_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getFunctions_Params_Future) Struct() (Ex_Debug_Handle_getFunctions_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getFunctions_Params(p.Struct()), err
}
func (p Ex_Debug_Handle_getFunctions_Params_Future) Query() Ex_Debug_Handle_Query_Future {
	return Ex_Debug_Handle_Query_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Debug_Handle_getFunctions_Results capnp.Struct

// Ex_Debug_Handle_getFunctions_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_getFunctions_Results.
const Ex_Debug_Handle_getFunctions_Results_TypeID = 0xf51d3183ff824127

func NewEx_Debug_Handle_getFunctions_Results(s *capnp.Segment) (Ex_Debug_Handle_getFunctions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunctions_Results(st), err
}

func NewRootEx_Debug_Handle_getFunctions_Results(s *capnp.Segment) (Ex_Debug_Handle_getFunctions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunctions_Results(st), err
}

func ReadRootEx_Debug_Handle_getFunctions_Results(msg *capnp.Message) (Ex_Debug_Handle_getFunctions_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getFunctions_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_getFunctions_Results) String() string {
	str, _ := text.Marshal(0xf51d3183ff824127, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getFunctions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getFunctions_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getFunctions_Results {
	return Ex_Debug_Handle_getFunctions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getFunctions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getFunctions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getFunctions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getFunctions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getFunctions_Results) Functions() (Ex_Debug_Handle_Function_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Function_List(p.List()), err
}

func (s Ex_Debug_Handle_getFunctions_Results) HasFunctions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getFunctions_Results) SetFunctions(v Ex_Debug_Handle_Function_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFunctions sets the functions field to a newly
// allocated Ex_Debug_Handle_Function_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_getFunctions_Results) NewFunctions(n int32) (Ex_Debug_Handle_Function_List, error) {
	l, err := NewEx_Debug_Handle_Function_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Function_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Ex_Debug_Handle_getFunctions_Results_List is a list of Ex_Debug_Handle_getFunctions_Results.
type Ex_Debug_Handle_getFunctions_Results_List = capnp.StructList[Ex_Debug_Handle_getFunctions_Results]

// NewEx_Debug_Handle_getFunctions_Results creates a new list of Ex_Debug_Handle_getFunctions_Results.
func NewEx_Debug_Handle_getFunctions_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getFunctions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getFunctions_Results](l), err
}

// Ex_Debug_Handle_getFunctions_Results_Future is a wrapper for a Ex_Debug_Handle_getFunctions_Results promised by a client call.
type Ex_Debug_Handle_getFunctions_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getFunctions_Results_Future) Struct() (Ex_Debug_Handle_getFunctions_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getFunctions_Results(p.Struct()), err
}

type Ex_Debug_Handle_getFunction_Params capnp.Struct

// Ex_Debug_Handle_getFunction_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_getFunction_Params.
const Ex_Debug_Handle_getFunction_Params_TypeID = 0xc5d33a433450b3b2

func NewEx_Debug_Handle_getFunction_Params(s *capnp.Segment) (Ex_Debug_Handle_getFunction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunction_Params(st), err
}

func NewRootEx_Debug_Handle_getFunction_Params(s *capnp.Segment) (Ex_Debug_Handle_getFunction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunction_Params(st), err
}

func ReadRootEx_Debug_Handle_getFunction_Params(msg *capnp.Message) (Ex_Debug_Handle_getFunction_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getFunction_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_getFunction_Params) String() string {
	str, _ := text.Marshal(0xc5d33a433450b3b2, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getFunction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getFunction_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getFunction_Params {
	return Ex_Debug_Handle_getFunction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getFunction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getFunction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getFunction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getFunction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getFunction_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ex_Debug_Handle_getFunction_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getFunction_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_getFunction_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ex_Debug_Handle_getFunction_Params_List is a list of Ex_Debug_Handle_getFunction_Params.
type Ex_Debug_Handle_getFunction_Params_List = capnp.StructList[Ex_Debug_Handle_getFunction_Params]

// NewEx_Debug_Handle_getFunction_Params creates a new list of Ex_Debug_Handle_getFunction_Params.
func NewEx_Debug_Handle_getFunction_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getFunction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getFunction_Params](l), err
}

// Ex_Debug_Handle_getFunction_Params_Future is a wrapper for a Ex_Debug_Handle_getFunction_Params promised by a client call.
type Ex_Debug_Handle_getFunction_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getFunction_Params_Future) Struct() (Ex_Debug_Handle_getFunction_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getFunction_Params(p.Struct()), err
}

type Ex_Debug_Handle_getFunction_Results capnp.Struct

// Ex_Debug_Handle_getFunction_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_getFunction_Results.
const Ex_Debug_Handle_getFunction_Results_TypeID = 0xab3885956b5bddb2

func NewEx_Debug_Handle_getFunction_Results(s *capnp.Segment) (Ex_Debug_Handle_getFunction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunction_Results(st), err
}

func NewRootEx_Debug_Handle_getFunction_Results(s *capnp.Segment) (Ex_Debug_Handle_getFunction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getFunction_Results(st), err
}

func ReadRootEx_Debug_Handle_getFunction_Results(msg *capnp.Message) (Ex_Debug_Handle_getFunction_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getFunction_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_getFunction_Results) String() string {
	str, _ := text.Marshal(0xab3885956b5bddb2, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getFunction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getFunction_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getFunction_Results {
	return Ex_Debug_Handle_getFunction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getFunction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getFunction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getFunction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getFunction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getFunction_Results) Handle() Ex_Debug_Handle_Function_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Function_Handle(p.Interface().Client())
}

func (s Ex_Debug_Handle_getFunction_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getFunction_Results) SetHandle(v Ex_Debug_Handle_Function_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_Debug_Handle_getFunction_Results_List is a list of Ex_Debug_Handle_getFunction_Results.
type Ex_Debug_Handle_getFunction_Results_List = capnp.StructList[Ex_Debug_Handle_getFunction_Results]

// NewEx_Debug_Handle_getFunction_Results creates a new list of Ex_Debug_Handle_getFunction_Results.
func NewEx_Debug_Handle_getFunction_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getFunction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getFunction_Results](l), err
}

// Ex_Debug_Handle_getFunction_Results_Future is a wrapper for a Ex_Debug_Handle_getFunction_Results promised by a client call.
type Ex_Debug_Handle_getFunction_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getFunction_Results_Future) Struct() (Ex_Debug_Handle_getFunction_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getFunction_Results(p.Struct()), err
}
func (p Ex_Debug_Handle_getFunction_Results_Future) Handle() Ex_Debug_Handle_Function_Handle {
	return Ex_Debug_Handle_Function_Handle(p.Future.Field(0, nil).Client())
}

type Ex_Debug_Handle_getTypes_Params capnp.Struct

// Ex_Debug_Handle_getTypes_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_getTypes_Params.
const Ex_Debug_Handle_getTypes_Params_TypeID = 0xa7864812635bd886

func NewEx_Debug_Handle_getTypes_Params(s *capnp.Segment) (Ex_Debug_Handle_getTypes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getTypes_Params(st), err
}

func NewRootEx_Debug_Handle_getTypes_Params(s *capnp.Segment) (Ex_Debug_Handle_getTypes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getTypes_Params(st), err
}

func ReadRootEx_Debug_Handle_getTypes_Params(msg *capnp.Message) (Ex_Debug_Handle_getTypes_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getTypes_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_getTypes_Params) String() string {
	str, _ := text.Marshal(0xa7864812635bd886, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getTypes_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getTypes_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getTypes_Params {
	return Ex_Debug_Handle_getTypes_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getTypes_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getTypes_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getTypes_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getTypes_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getTypes_Params) Query() (Ex_Debug_Handle_Query, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Query(p.Struct()), err
}

func (s Ex_Debug_Handle_getTypes_Params) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getTypes_Params) SetQuery(v Ex_Debug_Handle_Query) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Ex_Debug_Handle_Query struct, preferring placement in s's segment.
func (s Ex_Debug_Handle_getTypes_Params) NewQuery() (Ex_Debug_Handle_Query, error) {
	ss, err := NewEx_Debug_Handle_Query(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Debug_Handle_Query{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_Debug_Handle_getTypes_Params_List is a list of Ex_Debug_Handle_getTypes_Params.
type Ex_Debug_Handle_getTypes_Params_List = capnp.StructList[Ex_Debug_Handle_getTypes_Params]

// NewEx_Debug_Handle_getTypes_Params creates a new list of Ex_Debug_Handle_getTypes_Params.
func NewEx_Debug_Handle_getTypes_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getTypes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getTypes_Params](l), err
}

// Ex_Debug_Handle_getTypes_Params_Future is a wrapper for a Ex_Debug_Handle_getTypes_Params promised by a client call.
type Ex_Debug_Handle_getTypes_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getTypes_Params_Future) Struct() (Ex_Debug_Handle_getTypes_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getTypes_Params(p.Struct()), err
}
func (p Ex_Debug_Handle_getTypes_Params_Future) Query() Ex_Debug_Handle_Query_Future {
	return Ex_Debug_Handle_Query_Future{Future: p.Future.Field(0, nil)}
}

type Ex_Debug_Handle_getTypes_Results capnp.Struct

// Ex_Debug_Handle_getTypes_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_getTypes_Results.
const Ex_Debug_Handle_getTypes_Results_TypeID = 0xa4921750cc59ea66

func NewEx_Debug_Handle_getTypes_Results(s *capnp.Segment) (Ex_Debug_Handle_getTypes_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getTypes_Results(st), err
}

func NewRootEx_Debug_Handle_getTypes_Results(s *capnp.Segment) (Ex_Debug_Handle_getTypes_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getTypes_Results(st), err
}

func ReadRootEx_Debug_Handle_getTypes_Results(msg *capnp.Message) (Ex_Debug_Handle_getTypes_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getTypes_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_getTypes_Results) String() string {
	str, _ := text.Marshal(0xa4921750cc59ea66, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getTypes_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getTypes_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getTypes_Results {
	return Ex_Debug_Handle_getTypes_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getTypes_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getTypes_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getTypes_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getTypes_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getTypes_Results) Types() (Ex_Debug_Handle_Type_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Type_List(p.List()), err
}

func (s Ex_Debug_Handle_getTypes_Results) HasTypes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getTypes_Results) SetTypes(v Ex_Debug_Handle_Type_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated Ex_Debug_Handle_Type_List, preferring placement in s's segment.
func (s Ex_Debug_Handle_getTypes_Results) NewTypes(n int32) (Ex_Debug_Handle_Type_List, error) {
	l, err := NewEx_Debug_Handle_Type_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Ex_Debug_Handle_Type_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Ex_Debug_Handle_getTypes_Results_List is a list of Ex_Debug_Handle_getTypes_Results.
type Ex_Debug_Handle_getTypes_Results_List = capnp.StructList[Ex_Debug_Handle_getTypes_Results]

// NewEx_Debug_Handle_getTypes_Results creates a new list of Ex_Debug_Handle_getTypes_Results.
func NewEx_Debug_Handle_getTypes_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getTypes_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getTypes_Results](l), err
}

// Ex_Debug_Handle_getTypes_Results_Future is a wrapper for a Ex_Debug_Handle_getTypes_Results promised by a client call.
type Ex_Debug_Handle_getTypes_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getTypes_Results_Future) Struct() (Ex_Debug_Handle_getTypes_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getTypes_Results(p.Struct()), err
}

type Ex_Debug_Handle_getType_Params capnp.Struct

// Ex_Debug_Handle_getType_Params_TypeID is the unique identifier for the type Ex_Debug_Handle_getType_Params.
const Ex_Debug_Handle_getType_Params_TypeID = 0x93794522d6608992

func NewEx_Debug_Handle_getType_Params(s *capnp.Segment) (Ex_Debug_Handle_getType_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getType_Params(st), err
}

func NewRootEx_Debug_Handle_getType_Params(s *capnp.Segment) (Ex_Debug_Handle_getType_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getType_Params(st), err
}

func ReadRootEx_Debug_Handle_getType_Params(msg *capnp.Message) (Ex_Debug_Handle_getType_Params, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getType_Params(root.Struct()), err
}

func (s Ex_Debug_Handle_getType_Params) String() string {
	str, _ := text.Marshal(0x93794522d6608992, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getType_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getType_Params) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getType_Params {
	return Ex_Debug_Handle_getType_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getType_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getType_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getType_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getType_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getType_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ex_Debug_Handle_getType_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getType_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ex_Debug_Handle_getType_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ex_Debug_Handle_getType_Params_List is a list of Ex_Debug_Handle_getType_Params.
type Ex_Debug_Handle_getType_Params_List = capnp.StructList[Ex_Debug_Handle_getType_Params]

// NewEx_Debug_Handle_getType_Params creates a new list of Ex_Debug_Handle_getType_Params.
func NewEx_Debug_Handle_getType_Params_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getType_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getType_Params](l), err
}

// Ex_Debug_Handle_getType_Params_Future is a wrapper for a Ex_Debug_Handle_getType_Params promised by a client call.
type Ex_Debug_Handle_getType_Params_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getType_Params_Future) Struct() (Ex_Debug_Handle_getType_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getType_Params(p.Struct()), err
}

type Ex_Debug_Handle_getType_Results capnp.Struct

// Ex_Debug_Handle_getType_Results_TypeID is the unique identifier for the type Ex_Debug_Handle_getType_Results.
const Ex_Debug_Handle_getType_Results_TypeID = 0xb9d765574a76212d

func NewEx_Debug_Handle_getType_Results(s *capnp.Segment) (Ex_Debug_Handle_getType_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getType_Results(st), err
}

func NewRootEx_Debug_Handle_getType_Results(s *capnp.Segment) (Ex_Debug_Handle_getType_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_Debug_Handle_getType_Results(st), err
}

func ReadRootEx_Debug_Handle_getType_Results(msg *capnp.Message) (Ex_Debug_Handle_getType_Results, error) {
	root, err := msg.Root()
	return Ex_Debug_Handle_getType_Results(root.Struct()), err
}

func (s Ex_Debug_Handle_getType_Results) String() string {
	str, _ := text.Marshal(0xb9d765574a76212d, capnp.Struct(s))
	return str
}

func (s Ex_Debug_Handle_getType_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_Debug_Handle_getType_Results) DecodeFromPtr(p capnp.Ptr) Ex_Debug_Handle_getType_Results {
	return Ex_Debug_Handle_getType_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_Debug_Handle_getType_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_Debug_Handle_getType_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_Debug_Handle_getType_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_Debug_Handle_getType_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_Debug_Handle_getType_Results) Handle() Ex_Debug_Handle_Type_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Ex_Debug_Handle_Type_Handle(p.Interface().Client())
}

func (s Ex_Debug_Handle_getType_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_Debug_Handle_getType_Results) SetHandle(v Ex_Debug_Handle_Type_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_Debug_Handle_getType_Results_List is a list of Ex_Debug_Handle_getType_Results.
type Ex_Debug_Handle_getType_Results_List = capnp.StructList[Ex_Debug_Handle_getType_Results]

// NewEx_Debug_Handle_getType_Results creates a new list of Ex_Debug_Handle_getType_Results.
func NewEx_Debug_Handle_getType_Results_List(s *capnp.Segment, sz int32) (Ex_Debug_Handle_getType_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_Debug_Handle_getType_Results](l), err
}

// Ex_Debug_Handle_getType_Results_Future is a wrapper for a Ex_Debug_Handle_getType_Results promised by a client call.
type Ex_Debug_Handle_getType_Results_Future struct{ *capnp.Future }

func (f Ex_Debug_Handle_getType_Results_Future) Struct() (Ex_Debug_Handle_getType_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_Debug_Handle_getType_Results(p.Struct()), err
}
func (p Ex_Debug_Handle_getType_Results_Future) Handle() Ex_Debug_Handle_Type_Handle {
	return Ex_Debug_Handle_Type_Handle(p.Future.Field(0, nil).Client())
}

type Ex_getMachinas_Params capnp.Struct

// Ex_getMachinas_Params_TypeID is the unique identifier for the type Ex_getMachinas_Params.
const Ex_getMachinas_Params_TypeID = 0xd4b6e28f092175dd

func NewEx_getMachinas_Params(s *capnp.Segment) (Ex_getMachinas_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_getMachinas_Params(st), err
}

func NewRootEx_getMachinas_Params(s *capnp.Segment) (Ex_getMachinas_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ex_getMachinas_Params(st), err
}

func ReadRootEx_getMachinas_Params(msg *capnp.Message) (Ex_getMachinas_Params, error) {
	root, err := msg.Root()
	return Ex_getMachinas_Params(root.Struct()), err
}

func (s Ex_getMachinas_Params) String() string {
	str, _ := text.Marshal(0xd4b6e28f092175dd, capnp.Struct(s))
	return str
}

func (s Ex_getMachinas_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_getMachinas_Params) DecodeFromPtr(p capnp.Ptr) Ex_getMachinas_Params {
	return Ex_getMachinas_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_getMachinas_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_getMachinas_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_getMachinas_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_getMachinas_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ex_getMachinas_Params_List is a list of Ex_getMachinas_Params.
type Ex_getMachinas_Params_List = capnp.StructList[Ex_getMachinas_Params]

// NewEx_getMachinas_Params creates a new list of Ex_getMachinas_Params.
func NewEx_getMachinas_Params_List(s *capnp.Segment, sz int32) (Ex_getMachinas_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ex_getMachinas_Params](l), err
}

// Ex_getMachinas_Params_Future is a wrapper for a Ex_getMachinas_Params promised by a client call.
type Ex_getMachinas_Params_Future struct{ *capnp.Future }

func (f Ex_getMachinas_Params_Future) Struct() (Ex_getMachinas_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_getMachinas_Params(p.Struct()), err
}

type Ex_getMachinas_Results capnp.Struct

// Ex_getMachinas_Results_TypeID is the unique identifier for the type Ex_getMachinas_Results.
const Ex_getMachinas_Results_TypeID = 0xe0f5547eddd8f57b

func NewEx_getMachinas_Results(s *capnp.Segment) (Ex_getMachinas_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getMachinas_Results(st), err
}

func NewRootEx_getMachinas_Results(s *capnp.Segment) (Ex_getMachinas_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getMachinas_Results(st), err
}

func ReadRootEx_getMachinas_Results(msg *capnp.Message) (Ex_getMachinas_Results, error) {
	root, err := msg.Root()
	return Ex_getMachinas_Results(root.Struct()), err
}

func (s Ex_getMachinas_Results) String() string {
	str, _ := text.Marshal(0xe0f5547eddd8f57b, capnp.Struct(s))
	return str
}

func (s Ex_getMachinas_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_getMachinas_Results) DecodeFromPtr(p capnp.Ptr) Ex_getMachinas_Results {
	return Ex_getMachinas_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_getMachinas_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_getMachinas_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_getMachinas_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_getMachinas_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_getMachinas_Results) Stream() Stream {
	p, _ := capnp.Struct(s).Ptr(0)
	return Stream(p.Interface().Client())
}

func (s Ex_getMachinas_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_getMachinas_Results) SetStream(v Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Ex_getMachinas_Results_List is a list of Ex_getMachinas_Results.
type Ex_getMachinas_Results_List = capnp.StructList[Ex_getMachinas_Results]

// NewEx_getMachinas_Results creates a new list of Ex_getMachinas_Results.
func NewEx_getMachinas_Results_List(s *capnp.Segment, sz int32) (Ex_getMachinas_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_getMachinas_Results](l), err
}

// Ex_getMachinas_Results_Future is a wrapper for a Ex_getMachinas_Results promised by a client call.
type Ex_getMachinas_Results_Future struct{ *capnp.Future }

func (f Ex_getMachinas_Results_Future) Struct() (Ex_getMachinas_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_getMachinas_Results(p.Struct()), err
}
func (p Ex_getMachinas_Results_Future) Stream() Stream {
	return Stream(p.Future.Field(0, nil).Client())
}

type Ex_getExecutable_Params capnp.Struct

// Ex_getExecutable_Params_TypeID is the unique identifier for the type Ex_getExecutable_Params.
const Ex_getExecutable_Params_TypeID = 0xfef4858e56a4bece

func NewEx_getExecutable_Params(s *capnp.Segment) (Ex_getExecutable_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getExecutable_Params(st), err
}

func NewRootEx_getExecutable_Params(s *capnp.Segment) (Ex_getExecutable_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getExecutable_Params(st), err
}

func ReadRootEx_getExecutable_Params(msg *capnp.Message) (Ex_getExecutable_Params, error) {
	root, err := msg.Root()
	return Ex_getExecutable_Params(root.Struct()), err
}

func (s Ex_getExecutable_Params) String() string {
	str, _ := text.Marshal(0xfef4858e56a4bece, capnp.Struct(s))
	return str
}

func (s Ex_getExecutable_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_getExecutable_Params) DecodeFromPtr(p capnp.Ptr) Ex_getExecutable_Params {
	return Ex_getExecutable_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_getExecutable_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_getExecutable_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_getExecutable_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_getExecutable_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_getExecutable_Params) Executable() (Identifier, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identifier(p.Struct()), err
}

func (s Ex_getExecutable_Params) HasExecutable() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_getExecutable_Params) SetExecutable(v Identifier) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecutable sets the executable field to a newly
// allocated Identifier struct, preferring placement in s's segment.
func (s Ex_getExecutable_Params) NewExecutable() (Identifier, error) {
	ss, err := NewIdentifier(capnp.Struct(s).Segment())
	if err != nil {
		return Identifier{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_getExecutable_Params_List is a list of Ex_getExecutable_Params.
type Ex_getExecutable_Params_List = capnp.StructList[Ex_getExecutable_Params]

// NewEx_getExecutable_Params creates a new list of Ex_getExecutable_Params.
func NewEx_getExecutable_Params_List(s *capnp.Segment, sz int32) (Ex_getExecutable_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_getExecutable_Params](l), err
}

// Ex_getExecutable_Params_Future is a wrapper for a Ex_getExecutable_Params promised by a client call.
type Ex_getExecutable_Params_Future struct{ *capnp.Future }

func (f Ex_getExecutable_Params_Future) Struct() (Ex_getExecutable_Params, error) {
	p, err := f.Future.Ptr()
	return Ex_getExecutable_Params(p.Struct()), err
}
func (p Ex_getExecutable_Params_Future) Executable() Identifier_Future {
	return Identifier_Future{Future: p.Future.Field(0, nil)}
}

type Ex_getExecutable_Results capnp.Struct

// Ex_getExecutable_Results_TypeID is the unique identifier for the type Ex_getExecutable_Results.
const Ex_getExecutable_Results_TypeID = 0xa29faa3d9788e9c4

func NewEx_getExecutable_Results(s *capnp.Segment) (Ex_getExecutable_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getExecutable_Results(st), err
}

func NewRootEx_getExecutable_Results(s *capnp.Segment) (Ex_getExecutable_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ex_getExecutable_Results(st), err
}

func ReadRootEx_getExecutable_Results(msg *capnp.Message) (Ex_getExecutable_Results, error) {
	root, err := msg.Root()
	return Ex_getExecutable_Results(root.Struct()), err
}

func (s Ex_getExecutable_Results) String() string {
	str, _ := text.Marshal(0xa29faa3d9788e9c4, capnp.Struct(s))
	return str
}

func (s Ex_getExecutable_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ex_getExecutable_Results) DecodeFromPtr(p capnp.Ptr) Ex_getExecutable_Results {
	return Ex_getExecutable_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ex_getExecutable_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ex_getExecutable_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ex_getExecutable_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ex_getExecutable_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ex_getExecutable_Results) Executable() (Ex_Executable, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Ex_Executable(p.Struct()), err
}

func (s Ex_getExecutable_Results) HasExecutable() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ex_getExecutable_Results) SetExecutable(v Ex_Executable) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecutable sets the executable field to a newly
// allocated Ex_Executable struct, preferring placement in s's segment.
func (s Ex_getExecutable_Results) NewExecutable() (Ex_Executable, error) {
	ss, err := NewEx_Executable(capnp.Struct(s).Segment())
	if err != nil {
		return Ex_Executable{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Ex_getExecutable_Results_List is a list of Ex_getExecutable_Results.
type Ex_getExecutable_Results_List = capnp.StructList[Ex_getExecutable_Results]

// NewEx_getExecutable_Results creates a new list of Ex_getExecutable_Results.
func NewEx_getExecutable_Results_List(s *capnp.Segment, sz int32) (Ex_getExecutable_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ex_getExecutable_Results](l), err
}

// Ex_getExecutable_Results_Future is a wrapper for a Ex_getExecutable_Results promised by a client call.
type Ex_getExecutable_Results_Future struct{ *capnp.Future }

func (f Ex_getExecutable_Results_Future) Struct() (Ex_getExecutable_Results, error) {
	p, err := f.Future.Ptr()
	return Ex_getExecutable_Results(p.Struct()), err
}
func (p Ex_getExecutable_Results_Future) Executable() Ex_Executable_Future {
	return Ex_Executable_Future{Future: p.Future.Field(0, nil)}
}

type ExRegistrar capnp.Client

// ExRegistrar_TypeID is the unique identifier for the type ExRegistrar.
const ExRegistrar_TypeID = 0xf2ca5929f1dc40f8

func (c ExRegistrar) RegisterMachina(ctx context.Context, params func(ExRegistrar_registerMachina_Params) error) (ExRegistrar_registerMachina_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2ca5929f1dc40f8,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:ExRegistrar",
			MethodName:    "registerMachina",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ExRegistrar_registerMachina_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ExRegistrar_registerMachina_Results_Future{Future: ans.Future()}, release

}

func (c ExRegistrar) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ExRegistrar) String() string {
	return "ExRegistrar(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ExRegistrar) AddRef() ExRegistrar {
	return ExRegistrar(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ExRegistrar) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ExRegistrar) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ExRegistrar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ExRegistrar) DecodeFromPtr(p capnp.Ptr) ExRegistrar {
	return ExRegistrar(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ExRegistrar) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ExRegistrar) IsSame(other ExRegistrar) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ExRegistrar) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ExRegistrar) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ExRegistrar_Server is a ExRegistrar with a local implementation.
type ExRegistrar_Server interface {
	RegisterMachina(context.Context, ExRegistrar_registerMachina) error
}

// ExRegistrar_NewServer creates a new Server from an implementation of ExRegistrar_Server.
func ExRegistrar_NewServer(s ExRegistrar_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ExRegistrar_Methods(nil, s), s, c)
}

// ExRegistrar_ServerToClient creates a new Client from an implementation of ExRegistrar_Server.
// The caller is responsible for calling Release on the returned Client.
func ExRegistrar_ServerToClient(s ExRegistrar_Server) ExRegistrar {
	return ExRegistrar(capnp.NewClient(ExRegistrar_NewServer(s)))
}

// ExRegistrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ExRegistrar_Methods(methods []server.Method, s ExRegistrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2ca5929f1dc40f8,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:ExRegistrar",
			MethodName:    "registerMachina",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterMachina(ctx, ExRegistrar_registerMachina{call})
		},
	})

	return methods
}

// ExRegistrar_registerMachina holds the state for a server call to ExRegistrar.registerMachina.
// See server.Call for documentation.
type ExRegistrar_registerMachina struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ExRegistrar_registerMachina) Args() ExRegistrar_registerMachina_Params {
	return ExRegistrar_registerMachina_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ExRegistrar_registerMachina) AllocResults() (ExRegistrar_registerMachina_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExRegistrar_registerMachina_Results(r), err
}

// ExRegistrar_List is a list of ExRegistrar.
type ExRegistrar_List = capnp.CapList[ExRegistrar]

// NewExRegistrar creates a new list of ExRegistrar.
func NewExRegistrar_List(s *capnp.Segment, sz int32) (ExRegistrar_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ExRegistrar](l), err
}

type ExRegistrar_registerMachina_Params capnp.Struct

// ExRegistrar_registerMachina_Params_TypeID is the unique identifier for the type ExRegistrar_registerMachina_Params.
const ExRegistrar_registerMachina_Params_TypeID = 0xc1ab040756edc81e

func NewExRegistrar_registerMachina_Params(s *capnp.Segment) (ExRegistrar_registerMachina_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExRegistrar_registerMachina_Params(st), err
}

func NewRootExRegistrar_registerMachina_Params(s *capnp.Segment) (ExRegistrar_registerMachina_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExRegistrar_registerMachina_Params(st), err
}

func ReadRootExRegistrar_registerMachina_Params(msg *capnp.Message) (ExRegistrar_registerMachina_Params, error) {
	root, err := msg.Root()
	return ExRegistrar_registerMachina_Params(root.Struct()), err
}

func (s ExRegistrar_registerMachina_Params) String() string {
	str, _ := text.Marshal(0xc1ab040756edc81e, capnp.Struct(s))
	return str
}

func (s ExRegistrar_registerMachina_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExRegistrar_registerMachina_Params) DecodeFromPtr(p capnp.Ptr) ExRegistrar_registerMachina_Params {
	return ExRegistrar_registerMachina_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExRegistrar_registerMachina_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExRegistrar_registerMachina_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExRegistrar_registerMachina_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExRegistrar_registerMachina_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExRegistrar_registerMachina_Params) Machina() Machina {
	p, _ := capnp.Struct(s).Ptr(0)
	return Machina(p.Interface().Client())
}

func (s ExRegistrar_registerMachina_Params) HasMachina() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExRegistrar_registerMachina_Params) SetMachina(v Machina) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ExRegistrar_registerMachina_Params_List is a list of ExRegistrar_registerMachina_Params.
type ExRegistrar_registerMachina_Params_List = capnp.StructList[ExRegistrar_registerMachina_Params]

// NewExRegistrar_registerMachina_Params creates a new list of ExRegistrar_registerMachina_Params.
func NewExRegistrar_registerMachina_Params_List(s *capnp.Segment, sz int32) (ExRegistrar_registerMachina_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExRegistrar_registerMachina_Params](l), err
}

// ExRegistrar_registerMachina_Params_Future is a wrapper for a ExRegistrar_registerMachina_Params promised by a client call.
type ExRegistrar_registerMachina_Params_Future struct{ *capnp.Future }

func (f ExRegistrar_registerMachina_Params_Future) Struct() (ExRegistrar_registerMachina_Params, error) {
	p, err := f.Future.Ptr()
	return ExRegistrar_registerMachina_Params(p.Struct()), err
}
func (p ExRegistrar_registerMachina_Params_Future) Machina() Machina {
	return Machina(p.Future.Field(0, nil).Client())
}

type ExRegistrar_registerMachina_Results capnp.Struct

// ExRegistrar_registerMachina_Results_TypeID is the unique identifier for the type ExRegistrar_registerMachina_Results.
const ExRegistrar_registerMachina_Results_TypeID = 0xcc901063f4eb0263

func NewExRegistrar_registerMachina_Results(s *capnp.Segment) (ExRegistrar_registerMachina_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExRegistrar_registerMachina_Results(st), err
}

func NewRootExRegistrar_registerMachina_Results(s *capnp.Segment) (ExRegistrar_registerMachina_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExRegistrar_registerMachina_Results(st), err
}

func ReadRootExRegistrar_registerMachina_Results(msg *capnp.Message) (ExRegistrar_registerMachina_Results, error) {
	root, err := msg.Root()
	return ExRegistrar_registerMachina_Results(root.Struct()), err
}

func (s ExRegistrar_registerMachina_Results) String() string {
	str, _ := text.Marshal(0xcc901063f4eb0263, capnp.Struct(s))
	return str
}

func (s ExRegistrar_registerMachina_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExRegistrar_registerMachina_Results) DecodeFromPtr(p capnp.Ptr) ExRegistrar_registerMachina_Results {
	return ExRegistrar_registerMachina_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExRegistrar_registerMachina_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExRegistrar_registerMachina_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExRegistrar_registerMachina_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExRegistrar_registerMachina_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ExRegistrar_registerMachina_Results_List is a list of ExRegistrar_registerMachina_Results.
type ExRegistrar_registerMachina_Results_List = capnp.StructList[ExRegistrar_registerMachina_Results]

// NewExRegistrar_registerMachina_Results creates a new list of ExRegistrar_registerMachina_Results.
func NewExRegistrar_registerMachina_Results_List(s *capnp.Segment, sz int32) (ExRegistrar_registerMachina_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ExRegistrar_registerMachina_Results](l), err
}

// ExRegistrar_registerMachina_Results_Future is a wrapper for a ExRegistrar_registerMachina_Results promised by a client call.
type ExRegistrar_registerMachina_Results_Future struct{ *capnp.Future }

func (f ExRegistrar_registerMachina_Results_Future) Struct() (ExRegistrar_registerMachina_Results, error) {
	p, err := f.Future.Ptr()
	return ExRegistrar_registerMachina_Results(p.Struct()), err
}

type ExMonolith capnp.Client

// ExMonolith_TypeID is the unique identifier for the type ExMonolith.
const ExMonolith_TypeID = 0xa2f25f8b0143e06e

func (c ExMonolith) GetMachinas(ctx context.Context, params func(Ex_getMachinas_Params) error) (Ex_getMachinas_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getMachinas",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_getMachinas_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_getMachinas_Results_Future{Future: ans.Future()}, release

}

func (c ExMonolith) GetExecutable(ctx context.Context, params func(Ex_getExecutable_Params) error) (Ex_getExecutable_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getExecutable",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_getExecutable_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_getExecutable_Results_Future{Future: ans.Future()}, release

}

func (c ExMonolith) RegisterMachina(ctx context.Context, params func(ExRegistrar_registerMachina_Params) error) (ExRegistrar_registerMachina_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2ca5929f1dc40f8,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:ExRegistrar",
			MethodName:    "registerMachina",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ExRegistrar_registerMachina_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ExRegistrar_registerMachina_Results_Future{Future: ans.Future()}, release

}

func (c ExMonolith) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ExMonolith) String() string {
	return "ExMonolith(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ExMonolith) AddRef() ExMonolith {
	return ExMonolith(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ExMonolith) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ExMonolith) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ExMonolith) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ExMonolith) DecodeFromPtr(p capnp.Ptr) ExMonolith {
	return ExMonolith(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ExMonolith) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ExMonolith) IsSame(other ExMonolith) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ExMonolith) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ExMonolith) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ExMonolith_Server is a ExMonolith with a local implementation.
type ExMonolith_Server interface {
	GetMachinas(context.Context, Ex_getMachinas) error

	GetExecutable(context.Context, Ex_getExecutable) error

	RegisterMachina(context.Context, ExRegistrar_registerMachina) error
}

// ExMonolith_NewServer creates a new Server from an implementation of ExMonolith_Server.
func ExMonolith_NewServer(s ExMonolith_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ExMonolith_Methods(nil, s), s, c)
}

// ExMonolith_ServerToClient creates a new Client from an implementation of ExMonolith_Server.
// The caller is responsible for calling Release on the returned Client.
func ExMonolith_ServerToClient(s ExMonolith_Server) ExMonolith {
	return ExMonolith(capnp.NewClient(ExMonolith_NewServer(s)))
}

// ExMonolith_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ExMonolith_Methods(methods []server.Method, s ExMonolith_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getMachinas",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetMachinas(ctx, Ex_getMachinas{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4fe7b7026d7e809,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Ex",
			MethodName:    "getExecutable",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetExecutable(ctx, Ex_getExecutable{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2ca5929f1dc40f8,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:ExRegistrar",
			MethodName:    "registerMachina",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterMachina(ctx, ExRegistrar_registerMachina{call})
		},
	})

	return methods
}

// ExMonolith_List is a list of ExMonolith.
type ExMonolith_List = capnp.CapList[ExMonolith]

// NewExMonolith creates a new list of ExMonolith.
func NewExMonolith_List(s *capnp.Segment, sz int32) (ExMonolith_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ExMonolith](l), err
}

type Machina capnp.Client

// Machina_TypeID is the unique identifier for the type Machina.
const Machina_TypeID = 0xc0410d2e279f9226

func (c Machina) GetExecutable(ctx context.Context, params func(Machina_getExecutable_Params) error) (Machina_getExecutable_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0410d2e279f9226,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina",
			MethodName:    "getExecutable",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Machina_getExecutable_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Machina_getExecutable_Results_Future{Future: ans.Future()}, release

}

func (c Machina) GetProcesses(ctx context.Context, params func(Ex_Machina_Handle_getProcesses_Params) error) (Ex_Machina_Handle_getProcesses_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf3e0ce36f43f5792,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Machina.Handle",
			MethodName:    "getProcesses",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ex_Machina_Handle_getProcesses_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ex_Machina_Handle_getProcesses_Results_Future{Future: ans.Future()}, release

}

func (c Machina) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Machina) String() string {
	return "Machina(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Machina) AddRef() Machina {
	return Machina(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Machina) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Machina) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Machina) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Machina) DecodeFromPtr(p capnp.Ptr) Machina {
	return Machina(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Machina) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Machina) IsSame(other Machina) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Machina) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Machina) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Machina_Server is a Machina with a local implementation.
type Machina_Server interface {
	GetExecutable(context.Context, Machina_getExecutable) error

	GetProcesses(context.Context, Ex_Machina_Handle_getProcesses) error
}

// Machina_NewServer creates a new Server from an implementation of Machina_Server.
func Machina_NewServer(s Machina_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Machina_Methods(nil, s), s, c)
}

// Machina_ServerToClient creates a new Client from an implementation of Machina_Server.
// The caller is responsible for calling Release on the returned Client.
func Machina_ServerToClient(s Machina_Server) Machina {
	return Machina(capnp.NewClient(Machina_NewServer(s)))
}

// Machina_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Machina_Methods(methods []server.Method, s Machina_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0410d2e279f9226,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina",
			MethodName:    "getExecutable",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetExecutable(ctx, Machina_getExecutable{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf3e0ce36f43f5792,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Ex.Machina.Handle",
			MethodName:    "getProcesses",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetProcesses(ctx, Ex_Machina_Handle_getProcesses{call})
		},
	})

	return methods
}

// Machina_getExecutable holds the state for a server call to Machina.getExecutable.
// See server.Call for documentation.
type Machina_getExecutable struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Machina_getExecutable) Args() Machina_getExecutable_Params {
	return Machina_getExecutable_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Machina_getExecutable) AllocResults() (Machina_getExecutable_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_getExecutable_Results(r), err
}

// Machina_List is a list of Machina.
type Machina_List = capnp.CapList[Machina]

// NewMachina creates a new list of Machina.
func NewMachina_List(s *capnp.Segment, sz int32) (Machina_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Machina](l), err
}

type Machina_Executable capnp.Struct

// Machina_Executable_TypeID is the unique identifier for the type Machina_Executable.
const Machina_Executable_TypeID = 0xa3611cf8caa67307

func NewMachina_Executable(s *capnp.Segment) (Machina_Executable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable(st), err
}

func NewRootMachina_Executable(s *capnp.Segment) (Machina_Executable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable(st), err
}

func ReadRootMachina_Executable(msg *capnp.Message) (Machina_Executable, error) {
	root, err := msg.Root()
	return Machina_Executable(root.Struct()), err
}

func (s Machina_Executable) String() string {
	str, _ := text.Marshal(0xa3611cf8caa67307, capnp.Struct(s))
	return str
}

func (s Machina_Executable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable) DecodeFromPtr(p capnp.Ptr) Machina_Executable {
	return Machina_Executable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Machina_Executable) Handle() Machina_Executable_Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Machina_Executable_Handle(p.Interface().Client())
}

func (s Machina_Executable) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Machina_Executable) SetHandle(v Machina_Executable_Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Machina_Executable_List is a list of Machina_Executable.
type Machina_Executable_List = capnp.StructList[Machina_Executable]

// NewMachina_Executable creates a new list of Machina_Executable.
func NewMachina_Executable_List(s *capnp.Segment, sz int32) (Machina_Executable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Machina_Executable](l), err
}

// Machina_Executable_Future is a wrapper for a Machina_Executable promised by a client call.
type Machina_Executable_Future struct{ *capnp.Future }

func (f Machina_Executable_Future) Struct() (Machina_Executable, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable(p.Struct()), err
}
func (p Machina_Executable_Future) Handle() Machina_Executable_Handle {
	return Machina_Executable_Handle(p.Future.Field(0, nil).Client())
}

type Machina_Executable_FileSink capnp.Client

// Machina_Executable_FileSink_TypeID is the unique identifier for the type Machina_Executable_FileSink.
const Machina_Executable_FileSink_TypeID = 0xd978187dfa9d59d4

func (c Machina_Executable_FileSink) SendChunk(ctx context.Context, params func(Machina_Executable_FileSink_sendChunk_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd978187dfa9d59d4,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.FileSink",
			MethodName:    "sendChunk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Machina_Executable_FileSink_sendChunk_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Machina_Executable_FileSink) Done(ctx context.Context, params func(Machina_Executable_FileSink_done_Params) error) (Machina_Executable_FileSink_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd978187dfa9d59d4,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.FileSink",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Machina_Executable_FileSink_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Machina_Executable_FileSink_done_Results_Future{Future: ans.Future()}, release

}

func (c Machina_Executable_FileSink) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Machina_Executable_FileSink) String() string {
	return "Machina_Executable_FileSink(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Machina_Executable_FileSink) AddRef() Machina_Executable_FileSink {
	return Machina_Executable_FileSink(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Machina_Executable_FileSink) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Machina_Executable_FileSink) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Machina_Executable_FileSink) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Machina_Executable_FileSink) DecodeFromPtr(p capnp.Ptr) Machina_Executable_FileSink {
	return Machina_Executable_FileSink(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Machina_Executable_FileSink) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Machina_Executable_FileSink) IsSame(other Machina_Executable_FileSink) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Machina_Executable_FileSink) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Machina_Executable_FileSink) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Machina_Executable_FileSink_Server is a Machina_Executable_FileSink with a local implementation.
type Machina_Executable_FileSink_Server interface {
	SendChunk(context.Context, Machina_Executable_FileSink_sendChunk) error

	Done(context.Context, Machina_Executable_FileSink_done) error
}

// Machina_Executable_FileSink_NewServer creates a new Server from an implementation of Machina_Executable_FileSink_Server.
func Machina_Executable_FileSink_NewServer(s Machina_Executable_FileSink_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Machina_Executable_FileSink_Methods(nil, s), s, c)
}

// Machina_Executable_FileSink_ServerToClient creates a new Client from an implementation of Machina_Executable_FileSink_Server.
// The caller is responsible for calling Release on the returned Client.
func Machina_Executable_FileSink_ServerToClient(s Machina_Executable_FileSink_Server) Machina_Executable_FileSink {
	return Machina_Executable_FileSink(capnp.NewClient(Machina_Executable_FileSink_NewServer(s)))
}

// Machina_Executable_FileSink_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Machina_Executable_FileSink_Methods(methods []server.Method, s Machina_Executable_FileSink_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd978187dfa9d59d4,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.FileSink",
			MethodName:    "sendChunk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendChunk(ctx, Machina_Executable_FileSink_sendChunk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd978187dfa9d59d4,
			MethodID:      1,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.FileSink",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, Machina_Executable_FileSink_done{call})
		},
	})

	return methods
}

// Machina_Executable_FileSink_sendChunk holds the state for a server call to Machina_Executable_FileSink.sendChunk.
// See server.Call for documentation.
type Machina_Executable_FileSink_sendChunk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Machina_Executable_FileSink_sendChunk) Args() Machina_Executable_FileSink_sendChunk_Params {
	return Machina_Executable_FileSink_sendChunk_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Machina_Executable_FileSink_sendChunk) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Machina_Executable_FileSink_done holds the state for a server call to Machina_Executable_FileSink.done.
// See server.Call for documentation.
type Machina_Executable_FileSink_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Machina_Executable_FileSink_done) Args() Machina_Executable_FileSink_done_Params {
	return Machina_Executable_FileSink_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Machina_Executable_FileSink_done) AllocResults() (Machina_Executable_FileSink_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_FileSink_done_Results(r), err
}

// Machina_Executable_FileSink_List is a list of Machina_Executable_FileSink.
type Machina_Executable_FileSink_List = capnp.CapList[Machina_Executable_FileSink]

// NewMachina_Executable_FileSink creates a new list of Machina_Executable_FileSink.
func NewMachina_Executable_FileSink_List(s *capnp.Segment, sz int32) (Machina_Executable_FileSink_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Machina_Executable_FileSink](l), err
}

type Machina_Executable_FileSink_sendChunk_Params capnp.Struct

// Machina_Executable_FileSink_sendChunk_Params_TypeID is the unique identifier for the type Machina_Executable_FileSink_sendChunk_Params.
const Machina_Executable_FileSink_sendChunk_Params_TypeID = 0x8ba29bd012b7ef86

func NewMachina_Executable_FileSink_sendChunk_Params(s *capnp.Segment) (Machina_Executable_FileSink_sendChunk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable_FileSink_sendChunk_Params(st), err
}

func NewRootMachina_Executable_FileSink_sendChunk_Params(s *capnp.Segment) (Machina_Executable_FileSink_sendChunk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable_FileSink_sendChunk_Params(st), err
}

func ReadRootMachina_Executable_FileSink_sendChunk_Params(msg *capnp.Message) (Machina_Executable_FileSink_sendChunk_Params, error) {
	root, err := msg.Root()
	return Machina_Executable_FileSink_sendChunk_Params(root.Struct()), err
}

func (s Machina_Executable_FileSink_sendChunk_Params) String() string {
	str, _ := text.Marshal(0x8ba29bd012b7ef86, capnp.Struct(s))
	return str
}

func (s Machina_Executable_FileSink_sendChunk_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable_FileSink_sendChunk_Params) DecodeFromPtr(p capnp.Ptr) Machina_Executable_FileSink_sendChunk_Params {
	return Machina_Executable_FileSink_sendChunk_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable_FileSink_sendChunk_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable_FileSink_sendChunk_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable_FileSink_sendChunk_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable_FileSink_sendChunk_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Machina_Executable_FileSink_sendChunk_Params) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Machina_Executable_FileSink_sendChunk_Params) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Machina_Executable_FileSink_sendChunk_Params) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Machina_Executable_FileSink_sendChunk_Params_List is a list of Machina_Executable_FileSink_sendChunk_Params.
type Machina_Executable_FileSink_sendChunk_Params_List = capnp.StructList[Machina_Executable_FileSink_sendChunk_Params]

// NewMachina_Executable_FileSink_sendChunk_Params creates a new list of Machina_Executable_FileSink_sendChunk_Params.
func NewMachina_Executable_FileSink_sendChunk_Params_List(s *capnp.Segment, sz int32) (Machina_Executable_FileSink_sendChunk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Machina_Executable_FileSink_sendChunk_Params](l), err
}

// Machina_Executable_FileSink_sendChunk_Params_Future is a wrapper for a Machina_Executable_FileSink_sendChunk_Params promised by a client call.
type Machina_Executable_FileSink_sendChunk_Params_Future struct{ *capnp.Future }

func (f Machina_Executable_FileSink_sendChunk_Params_Future) Struct() (Machina_Executable_FileSink_sendChunk_Params, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable_FileSink_sendChunk_Params(p.Struct()), err
}

type Machina_Executable_FileSink_done_Params capnp.Struct

// Machina_Executable_FileSink_done_Params_TypeID is the unique identifier for the type Machina_Executable_FileSink_done_Params.
const Machina_Executable_FileSink_done_Params_TypeID = 0xa966164529502f4f

func NewMachina_Executable_FileSink_done_Params(s *capnp.Segment) (Machina_Executable_FileSink_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_FileSink_done_Params(st), err
}

func NewRootMachina_Executable_FileSink_done_Params(s *capnp.Segment) (Machina_Executable_FileSink_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_FileSink_done_Params(st), err
}

func ReadRootMachina_Executable_FileSink_done_Params(msg *capnp.Message) (Machina_Executable_FileSink_done_Params, error) {
	root, err := msg.Root()
	return Machina_Executable_FileSink_done_Params(root.Struct()), err
}

func (s Machina_Executable_FileSink_done_Params) String() string {
	str, _ := text.Marshal(0xa966164529502f4f, capnp.Struct(s))
	return str
}

func (s Machina_Executable_FileSink_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable_FileSink_done_Params) DecodeFromPtr(p capnp.Ptr) Machina_Executable_FileSink_done_Params {
	return Machina_Executable_FileSink_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable_FileSink_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable_FileSink_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable_FileSink_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable_FileSink_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Machina_Executable_FileSink_done_Params_List is a list of Machina_Executable_FileSink_done_Params.
type Machina_Executable_FileSink_done_Params_List = capnp.StructList[Machina_Executable_FileSink_done_Params]

// NewMachina_Executable_FileSink_done_Params creates a new list of Machina_Executable_FileSink_done_Params.
func NewMachina_Executable_FileSink_done_Params_List(s *capnp.Segment, sz int32) (Machina_Executable_FileSink_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Machina_Executable_FileSink_done_Params](l), err
}

// Machina_Executable_FileSink_done_Params_Future is a wrapper for a Machina_Executable_FileSink_done_Params promised by a client call.
type Machina_Executable_FileSink_done_Params_Future struct{ *capnp.Future }

func (f Machina_Executable_FileSink_done_Params_Future) Struct() (Machina_Executable_FileSink_done_Params, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable_FileSink_done_Params(p.Struct()), err
}

type Machina_Executable_FileSink_done_Results capnp.Struct

// Machina_Executable_FileSink_done_Results_TypeID is the unique identifier for the type Machina_Executable_FileSink_done_Results.
const Machina_Executable_FileSink_done_Results_TypeID = 0x878c54fc3316539c

func NewMachina_Executable_FileSink_done_Results(s *capnp.Segment) (Machina_Executable_FileSink_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_FileSink_done_Results(st), err
}

func NewRootMachina_Executable_FileSink_done_Results(s *capnp.Segment) (Machina_Executable_FileSink_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_FileSink_done_Results(st), err
}

func ReadRootMachina_Executable_FileSink_done_Results(msg *capnp.Message) (Machina_Executable_FileSink_done_Results, error) {
	root, err := msg.Root()
	return Machina_Executable_FileSink_done_Results(root.Struct()), err
}

func (s Machina_Executable_FileSink_done_Results) String() string {
	str, _ := text.Marshal(0x878c54fc3316539c, capnp.Struct(s))
	return str
}

func (s Machina_Executable_FileSink_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable_FileSink_done_Results) DecodeFromPtr(p capnp.Ptr) Machina_Executable_FileSink_done_Results {
	return Machina_Executable_FileSink_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable_FileSink_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable_FileSink_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable_FileSink_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable_FileSink_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Machina_Executable_FileSink_done_Results_List is a list of Machina_Executable_FileSink_done_Results.
type Machina_Executable_FileSink_done_Results_List = capnp.StructList[Machina_Executable_FileSink_done_Results]

// NewMachina_Executable_FileSink_done_Results creates a new list of Machina_Executable_FileSink_done_Results.
func NewMachina_Executable_FileSink_done_Results_List(s *capnp.Segment, sz int32) (Machina_Executable_FileSink_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Machina_Executable_FileSink_done_Results](l), err
}

// Machina_Executable_FileSink_done_Results_Future is a wrapper for a Machina_Executable_FileSink_done_Results promised by a client call.
type Machina_Executable_FileSink_done_Results_Future struct{ *capnp.Future }

func (f Machina_Executable_FileSink_done_Results_Future) Struct() (Machina_Executable_FileSink_done_Results, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable_FileSink_done_Results(p.Struct()), err
}

type Machina_Executable_Handle capnp.Client

// Machina_Executable_Handle_TypeID is the unique identifier for the type Machina_Executable_Handle.
const Machina_Executable_Handle_TypeID = 0xf56244ff372e5246

func (c Machina_Executable_Handle) GetContent(ctx context.Context, params func(Machina_Executable_Handle_getContent_Params) error) (Machina_Executable_Handle_getContent_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf56244ff372e5246,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.Handle",
			MethodName:    "getContent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Machina_Executable_Handle_getContent_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Machina_Executable_Handle_getContent_Results_Future{Future: ans.Future()}, release

}

func (c Machina_Executable_Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Machina_Executable_Handle) String() string {
	return "Machina_Executable_Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Machina_Executable_Handle) AddRef() Machina_Executable_Handle {
	return Machina_Executable_Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Machina_Executable_Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Machina_Executable_Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Machina_Executable_Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Machina_Executable_Handle) DecodeFromPtr(p capnp.Ptr) Machina_Executable_Handle {
	return Machina_Executable_Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Machina_Executable_Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Machina_Executable_Handle) IsSame(other Machina_Executable_Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Machina_Executable_Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Machina_Executable_Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Machina_Executable_Handle_Server is a Machina_Executable_Handle with a local implementation.
type Machina_Executable_Handle_Server interface {
	GetContent(context.Context, Machina_Executable_Handle_getContent) error
}

// Machina_Executable_Handle_NewServer creates a new Server from an implementation of Machina_Executable_Handle_Server.
func Machina_Executable_Handle_NewServer(s Machina_Executable_Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Machina_Executable_Handle_Methods(nil, s), s, c)
}

// Machina_Executable_Handle_ServerToClient creates a new Client from an implementation of Machina_Executable_Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Machina_Executable_Handle_ServerToClient(s Machina_Executable_Handle_Server) Machina_Executable_Handle {
	return Machina_Executable_Handle(capnp.NewClient(Machina_Executable_Handle_NewServer(s)))
}

// Machina_Executable_Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Machina_Executable_Handle_Methods(methods []server.Method, s Machina_Executable_Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf56244ff372e5246,
			MethodID:      0,
			InterfaceName: "data_ex_machina.capnp:Machina.Executable.Handle",
			MethodName:    "getContent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetContent(ctx, Machina_Executable_Handle_getContent{call})
		},
	})

	return methods
}

// Machina_Executable_Handle_getContent holds the state for a server call to Machina_Executable_Handle.getContent.
// See server.Call for documentation.
type Machina_Executable_Handle_getContent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Machina_Executable_Handle_getContent) Args() Machina_Executable_Handle_getContent_Params {
	return Machina_Executable_Handle_getContent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Machina_Executable_Handle_getContent) AllocResults() (Machina_Executable_Handle_getContent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_Handle_getContent_Results(r), err
}

// Machina_Executable_Handle_List is a list of Machina_Executable_Handle.
type Machina_Executable_Handle_List = capnp.CapList[Machina_Executable_Handle]

// NewMachina_Executable_Handle creates a new list of Machina_Executable_Handle.
func NewMachina_Executable_Handle_List(s *capnp.Segment, sz int32) (Machina_Executable_Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Machina_Executable_Handle](l), err
}

type Machina_Executable_Handle_getContent_Params capnp.Struct

// Machina_Executable_Handle_getContent_Params_TypeID is the unique identifier for the type Machina_Executable_Handle_getContent_Params.
const Machina_Executable_Handle_getContent_Params_TypeID = 0xe4e0a5dfdfd19c52

func NewMachina_Executable_Handle_getContent_Params(s *capnp.Segment) (Machina_Executable_Handle_getContent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable_Handle_getContent_Params(st), err
}

func NewRootMachina_Executable_Handle_getContent_Params(s *capnp.Segment) (Machina_Executable_Handle_getContent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_Executable_Handle_getContent_Params(st), err
}

func ReadRootMachina_Executable_Handle_getContent_Params(msg *capnp.Message) (Machina_Executable_Handle_getContent_Params, error) {
	root, err := msg.Root()
	return Machina_Executable_Handle_getContent_Params(root.Struct()), err
}

func (s Machina_Executable_Handle_getContent_Params) String() string {
	str, _ := text.Marshal(0xe4e0a5dfdfd19c52, capnp.Struct(s))
	return str
}

func (s Machina_Executable_Handle_getContent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable_Handle_getContent_Params) DecodeFromPtr(p capnp.Ptr) Machina_Executable_Handle_getContent_Params {
	return Machina_Executable_Handle_getContent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable_Handle_getContent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable_Handle_getContent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable_Handle_getContent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable_Handle_getContent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Machina_Executable_Handle_getContent_Params) Sink() Machina_Executable_FileSink {
	p, _ := capnp.Struct(s).Ptr(0)
	return Machina_Executable_FileSink(p.Interface().Client())
}

func (s Machina_Executable_Handle_getContent_Params) HasSink() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Machina_Executable_Handle_getContent_Params) SetSink(v Machina_Executable_FileSink) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Machina_Executable_Handle_getContent_Params_List is a list of Machina_Executable_Handle_getContent_Params.
type Machina_Executable_Handle_getContent_Params_List = capnp.StructList[Machina_Executable_Handle_getContent_Params]

// NewMachina_Executable_Handle_getContent_Params creates a new list of Machina_Executable_Handle_getContent_Params.
func NewMachina_Executable_Handle_getContent_Params_List(s *capnp.Segment, sz int32) (Machina_Executable_Handle_getContent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Machina_Executable_Handle_getContent_Params](l), err
}

// Machina_Executable_Handle_getContent_Params_Future is a wrapper for a Machina_Executable_Handle_getContent_Params promised by a client call.
type Machina_Executable_Handle_getContent_Params_Future struct{ *capnp.Future }

func (f Machina_Executable_Handle_getContent_Params_Future) Struct() (Machina_Executable_Handle_getContent_Params, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable_Handle_getContent_Params(p.Struct()), err
}
func (p Machina_Executable_Handle_getContent_Params_Future) Sink() Machina_Executable_FileSink {
	return Machina_Executable_FileSink(p.Future.Field(0, nil).Client())
}

type Machina_Executable_Handle_getContent_Results capnp.Struct

// Machina_Executable_Handle_getContent_Results_TypeID is the unique identifier for the type Machina_Executable_Handle_getContent_Results.
const Machina_Executable_Handle_getContent_Results_TypeID = 0xf37694889d7f1921

func NewMachina_Executable_Handle_getContent_Results(s *capnp.Segment) (Machina_Executable_Handle_getContent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_Handle_getContent_Results(st), err
}

func NewRootMachina_Executable_Handle_getContent_Results(s *capnp.Segment) (Machina_Executable_Handle_getContent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Machina_Executable_Handle_getContent_Results(st), err
}

func ReadRootMachina_Executable_Handle_getContent_Results(msg *capnp.Message) (Machina_Executable_Handle_getContent_Results, error) {
	root, err := msg.Root()
	return Machina_Executable_Handle_getContent_Results(root.Struct()), err
}

func (s Machina_Executable_Handle_getContent_Results) String() string {
	str, _ := text.Marshal(0xf37694889d7f1921, capnp.Struct(s))
	return str
}

func (s Machina_Executable_Handle_getContent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_Executable_Handle_getContent_Results) DecodeFromPtr(p capnp.Ptr) Machina_Executable_Handle_getContent_Results {
	return Machina_Executable_Handle_getContent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_Executable_Handle_getContent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_Executable_Handle_getContent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_Executable_Handle_getContent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_Executable_Handle_getContent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Machina_Executable_Handle_getContent_Results_List is a list of Machina_Executable_Handle_getContent_Results.
type Machina_Executable_Handle_getContent_Results_List = capnp.StructList[Machina_Executable_Handle_getContent_Results]

// NewMachina_Executable_Handle_getContent_Results creates a new list of Machina_Executable_Handle_getContent_Results.
func NewMachina_Executable_Handle_getContent_Results_List(s *capnp.Segment, sz int32) (Machina_Executable_Handle_getContent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Machina_Executable_Handle_getContent_Results](l), err
}

// Machina_Executable_Handle_getContent_Results_Future is a wrapper for a Machina_Executable_Handle_getContent_Results promised by a client call.
type Machina_Executable_Handle_getContent_Results_Future struct{ *capnp.Future }

func (f Machina_Executable_Handle_getContent_Results_Future) Struct() (Machina_Executable_Handle_getContent_Results, error) {
	p, err := f.Future.Ptr()
	return Machina_Executable_Handle_getContent_Results(p.Struct()), err
}

type Machina_getExecutable_Params capnp.Struct

// Machina_getExecutable_Params_TypeID is the unique identifier for the type Machina_getExecutable_Params.
const Machina_getExecutable_Params_TypeID = 0x92ff0dd57eb6df25

func NewMachina_getExecutable_Params(s *capnp.Segment) (Machina_getExecutable_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_getExecutable_Params(st), err
}

func NewRootMachina_getExecutable_Params(s *capnp.Segment) (Machina_getExecutable_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_getExecutable_Params(st), err
}

func ReadRootMachina_getExecutable_Params(msg *capnp.Message) (Machina_getExecutable_Params, error) {
	root, err := msg.Root()
	return Machina_getExecutable_Params(root.Struct()), err
}

func (s Machina_getExecutable_Params) String() string {
	str, _ := text.Marshal(0x92ff0dd57eb6df25, capnp.Struct(s))
	return str
}

func (s Machina_getExecutable_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_getExecutable_Params) DecodeFromPtr(p capnp.Ptr) Machina_getExecutable_Params {
	return Machina_getExecutable_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_getExecutable_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_getExecutable_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_getExecutable_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_getExecutable_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Machina_getExecutable_Params) Executable() (Identifier, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identifier(p.Struct()), err
}

func (s Machina_getExecutable_Params) HasExecutable() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Machina_getExecutable_Params) SetExecutable(v Identifier) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecutable sets the executable field to a newly
// allocated Identifier struct, preferring placement in s's segment.
func (s Machina_getExecutable_Params) NewExecutable() (Identifier, error) {
	ss, err := NewIdentifier(capnp.Struct(s).Segment())
	if err != nil {
		return Identifier{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Machina_getExecutable_Params_List is a list of Machina_getExecutable_Params.
type Machina_getExecutable_Params_List = capnp.StructList[Machina_getExecutable_Params]

// NewMachina_getExecutable_Params creates a new list of Machina_getExecutable_Params.
func NewMachina_getExecutable_Params_List(s *capnp.Segment, sz int32) (Machina_getExecutable_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Machina_getExecutable_Params](l), err
}

// Machina_getExecutable_Params_Future is a wrapper for a Machina_getExecutable_Params promised by a client call.
type Machina_getExecutable_Params_Future struct{ *capnp.Future }

func (f Machina_getExecutable_Params_Future) Struct() (Machina_getExecutable_Params, error) {
	p, err := f.Future.Ptr()
	return Machina_getExecutable_Params(p.Struct()), err
}
func (p Machina_getExecutable_Params_Future) Executable() Identifier_Future {
	return Identifier_Future{Future: p.Future.Field(0, nil)}
}

type Machina_getExecutable_Results capnp.Struct

// Machina_getExecutable_Results_TypeID is the unique identifier for the type Machina_getExecutable_Results.
const Machina_getExecutable_Results_TypeID = 0xba5ffabbd2930101

func NewMachina_getExecutable_Results(s *capnp.Segment) (Machina_getExecutable_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_getExecutable_Results(st), err
}

func NewRootMachina_getExecutable_Results(s *capnp.Segment) (Machina_getExecutable_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Machina_getExecutable_Results(st), err
}

func ReadRootMachina_getExecutable_Results(msg *capnp.Message) (Machina_getExecutable_Results, error) {
	root, err := msg.Root()
	return Machina_getExecutable_Results(root.Struct()), err
}

func (s Machina_getExecutable_Results) String() string {
	str, _ := text.Marshal(0xba5ffabbd2930101, capnp.Struct(s))
	return str
}

func (s Machina_getExecutable_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Machina_getExecutable_Results) DecodeFromPtr(p capnp.Ptr) Machina_getExecutable_Results {
	return Machina_getExecutable_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Machina_getExecutable_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Machina_getExecutable_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Machina_getExecutable_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Machina_getExecutable_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Machina_getExecutable_Results) Executable() (Machina_Executable, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Machina_Executable(p.Struct()), err
}

func (s Machina_getExecutable_Results) HasExecutable() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Machina_getExecutable_Results) SetExecutable(v Machina_Executable) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewExecutable sets the executable field to a newly
// allocated Machina_Executable struct, preferring placement in s's segment.
func (s Machina_getExecutable_Results) NewExecutable() (Machina_Executable, error) {
	ss, err := NewMachina_Executable(capnp.Struct(s).Segment())
	if err != nil {
		return Machina_Executable{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Machina_getExecutable_Results_List is a list of Machina_getExecutable_Results.
type Machina_getExecutable_Results_List = capnp.StructList[Machina_getExecutable_Results]

// NewMachina_getExecutable_Results creates a new list of Machina_getExecutable_Results.
func NewMachina_getExecutable_Results_List(s *capnp.Segment, sz int32) (Machina_getExecutable_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Machina_getExecutable_Results](l), err
}

// Machina_getExecutable_Results_Future is a wrapper for a Machina_getExecutable_Results promised by a client call.
type Machina_getExecutable_Results_Future struct{ *capnp.Future }

func (f Machina_getExecutable_Results_Future) Struct() (Machina_getExecutable_Results, error) {
	p, err := f.Future.Ptr()
	return Machina_getExecutable_Results(p.Struct()), err
}
func (p Machina_getExecutable_Results_Future) Executable() Machina_Executable_Future {
	return Machina_Executable_Future{Future: p.Future.Field(0, nil)}
}

const schema_a5f26ade549e9db5 = "x\xda\xb4Z}p\x14\xe7y\x7f\x9e\xdd;\x0e\x11\x1d" +
	"w\xaf\xf6$\x9d\x84\xe43\x8cl\x83l\xceH\xb2c" +
	"\"\xc7\x95\x04\x08!\x15Z\xad\x8c\x9d\x11\x8e\x0d\xab\xbb" +
	"EZ8\xdd\x89\xbd\x15H\x8e\xb1&\x14\xfc\x81\xe3\xa6" +
	"\xc8\xa1\x9d\xe2\xc8\x18\xd7\xa4v(\xd3\x81\x16\x928m" +
	"\xb0\xdb@\\\x1a<\xc6\x89?'\xb2\xb1k\xc7\x1f\xa9" +
	"\xa71131)l\xe7}\xf7v\xf7\xbd\xd3I:" +
	"\xd1\x89\xfe\xba;=\xfb>\xdf\xbf\xe7\xe3\xdd%\x0b\xe7" +
	"4{\xea\xfc\xdb*@\xb8}!zg\x99'?\xaa" +
	"\xd2\xdf\xfaa\xd17\x81\xd4\x88f\xfb\x8b\xbf^\xba\xba" +
	"\xfe+'\x00\xb0\xe1@\xf1:\x94\x8e\x15\xfb\x00\xa4#" +
	"\xc5m\xd28\xfdd\x8e_\xbau\xe7\xc8\xbeY;\x81" +
	"\x94\x89\xe6\xb1\xb1'\xd6\xbe\xbd\xe9\xfcA\x00\x08\xa2t" +
	"\xb2\xf8\x13\xe9,#?S\xdc&U\xfb}R\xb5?" +
	"`\xfe\xec\x91\xcfv\xddtb\xf5N\x90\xafE\xc1L" +
	">\xb6mw\xf9\xfb\xbfz\x14\xbc\xe8\x03h \xfe\x1e" +
	"\x94\xae\xf1\xd3g\xe6\xfb?\x044\xb7\xef\xff\xd1j\xbc" +
	"\xf5\x9e\x9d@*\xd0,\xfa\xe8\xf5k\x07\xbeq\xf9s" +
	"\xf0\x8a\x94\xf8\x92\x7f\x0eJ\xfe\xb9\xe5\x00R\xe9\xdc\x7f" +
	"\x044\xbf{{Y\xc3\xff\xae\xfd\xd6\x83@\xea\x11\xc0" +
	"Ci\x0e\xcf\xbd\x88\xe01\xdf\xefj\xf3$\xdf\x1f{" +
	"\x08\xe4\xab\x10\xcd\xb3\xe7\xbaV\x9fz\xef\xbe'\xa1\xd4" +
	"\xe3C\x80\x86\x03s+\x11Pz\x96\x1d\xf2\xc0\xff\xfc" +
	"\xa0\xe4\xe5\xc7\x9fz\xc4:\xc4\x12\xab%P)\x00J" +
	"\xdd\x81&@\xb3d\xf4\xfe\xeec\xdf\xab\xfd\x16\x90\xab" +
	"m.\xc3\x81{)\x97\xdag\xee\x8b\xb4?\x13y\x14" +
	"\xe42D\xd7\x18\x8cD\x0d\xccAi0@5\xdb\xc2" +
	"\x8eq4'\x11\xd1|wi\xcb\xb7\xaf>\x9e>@" +
	"\xcd\xbc7P\x8f\xd2\xc1\xc0-\x00\x0d\xff\x11\xf0\xa14" +
	"\x18\xa4v\xbe\xe6\x9d\xe3\xf7\xbf\xea7G\x81\\\xe5\x88" +
	"uwp\x1f\x95\xbb?H\xcf\x1b}x\xc3k\x0bZ" +
	"\x87\x1f\x03r\xadC\xb0'\xf8}Jp\x80\x11\xfc\xe1" +
	"\xb1[_~\xb7\xf8\xe8w\x80\\\xef\x10\xbc\x10|\x8f" +
	"\x12\xbc\xca\x08nz\xe2Kg\xf6=x\xfd^J`" +
	"\xe25/\xde8\xf0\xe8\xde\x9fe\x08/\x04GQ\xf2" +
	"\x13fk\xd2\x04x\xb9c\xc9\xbd\xfe\x0f\x0f\xed\x93\x97" +
	"\"\x9a\x8d\xa1\xf4kg\x9bO\x98P*0{\xb6\x92" +
	"\xb7\xe8\xa9\xdd\x94\xd0\x94\x8b\x0f\x8e\x98\xb3O\xed\xa3r" +
	"q\xeef\x1e\xdcN\xeeEi\x0f\xb9\x0e@:H\xa8" +
	"\xf1\x1d\xcfd[\xd0KM(\xddVr^j/\xa1" +
	"\"\xc8%\x94\xd81ZvlPy\xa5\xb3%\x17\xa5" +
	"qF\xfbA\x09\x95\xe2\xa7\x1f?\xf47\xb7}\x7f\xff" +
	"S\x94\xd6V\xde+\xddK\xc5$\x12s\xc7\xb9\xe5\xf8" +
	"\xc8\xfa\xf3O\xe5\xc416\xdc,\xcdA\xa9U\xa2\x87" +
	"\xb6H>\xa9E\xba\x0e\xc0\xf4\xa5\xbfw\xfa\xf7U\xca" +
	"\xdfQo\x98\xd7\x8e\xee\xbf.\xeaoy>s\xecW" +
	"\xa4\x0e\x94\xd6P2IeGo\xfc\xa4\xfb\xe7\x9d\xe5" +
	"\xa3O\xf3\x9e\xd9%=Gy\xefe\x04G\x86^\xdb" +
	"y\xcf\xfeg\x0e\x02Y\xe8\x10\x9c\x94\x98g\xded\x04" +
	"\x0f\xbcqW\xacd\xd5\x03\x7f\xcf\x9f\xf0\x85t\x94\x12" +
	"\x14\x85(\xc1\x9f\xdf\xd8\xb9\xa8\xb5l\xe3\xb3\\\xe4/" +
	"\x0a\x9d\xa71yt\xfc\xae\xcd{w-=\xc4?Z" +
	"\x1dz\x85>Z\xc7\x1e\xfd\xc1\x1b\x87/o\xbd\x9c\xfa" +
	"\x07 e\xbc\xc5\x99\x15\xe5\xd0'\xd2\xdd!jE\x8d" +
	"\xd1\xfef\xd7\xf6\xba_D\x0f\x1e\x05\xf2e\x9b\xcdX" +
	"\xa8Q\x00\x8f\xd9\xf6\xe9\x9f\x94\xa4\xdf-:\x0e\xe4F" +
	"\xd1u9\x8d\xe6\xd0Q\x94\x0e\x87\xe8i\xcf\x86\xda\xa4" +
	"W\xe9's\xf1\xfc\xad\x1d_S_\xff\x11/\xd4\xbf" +
	"\x86\x98>g\x18#\xc4\xc7^\xf9\xf1\xc5\xf5\xcf\xf1\xd1" +
	"\xfei\xe8)Jp\x89\x11\x94\x9c:u\xe6\xc2gw" +
	"\xfd\x0b\x90j\x8b \x88\x0d\xf3K7Q\x82\xc5\xa5\x94" +
	" v\xe6\xec=O\x9e\xbf\xe5\x04o\xd35\xa5\x9fP" +
	"\x02\x85\x118\xc861z\x1a^(]\x80\xd2\xd9R" +
	"\xaa\xf8\x9b\x8c\xf8\xc7;\x9fx=rj\xf7\x09\xaa\xb8" +
	"\x19\xbf\xe3\xd8\x07_]\x1c\xfeC&\x88\xbf(\xbd\x88" +
	"Ri\x19%\xae.\xa3q\xf9x\xf1\x0d\xde\xafw\x04" +
	"\x9f\x07r\xbd\xe8\xe6\x11`\xc3\xc9\xb2Q\x94\xc6\xcb\xa8" +
	"-\xde,k\x93\xbc\xe5\xd4\x16N\xf4\xe4\x04\x9e\xf4i" +
	"\xd9y\xe9\x0bv\xac\xb7\xbcM\xaa+/\x070\xafz" +
	"\xf1\xd3;}\x9eC/\x00Y\xe0h5\xbf\xfc4\xd5" +
	"\xea\xe6r*\xe8\xd1\x7f\xea\xbciy\xe3/N\xf2\x96" +
	"\xbd\xc3\"\xd0\x18\x81#O\x9et|\xb8|\x1dJc" +
	"\xe54r\x8f\x94SM~}\xf4\xe2\xa1/}Q\xfd" +
	"\xa2ee\x0f5r{\xb8\x87\x86UL\xf8\xcd\xe7\xb1" +
	"\xe0_\xfd\xdc\x12\x84E\xc2\xcd\xe1W\x18\x08\xbe3\xb6" +
	"\xef\x91\x1b\x1e?c\xc5\x88%\xc1\xa2\xf02\x8a\x9f-" +
	"a*\xc1\xdam\x97\xf7\x97\xff\xf5O\xcf\x00\xb9Jt" +
	"\x13\x1e\xb0A\x09\xd7\xa2\xb4%L\xcd\xd3\x1f\xf6I\xfd" +
	"a\xaa\xf1\xe1\x7f\xde\xe4\x8d}\xa4\xbfd\xa1\x16ct" +
	"w\xf8-\xcah|p~\xd1\xb7\xdf;\xfeK+\xa5" +
	"\xd9\x7fdK\xb8}\xff~\xb0;\xfd\xca\x07op\xd9" +
	"p[\xb8\x92\x86\xe9/\xbb\xc7.n\x0f\x0f\xbd\x09d" +
	"\x91\xe8&1\xcd\xf2\xf0(Jk\x18\xef\xf6\xf0\x83\xd2" +
	"\x18\xfdd~\xbc\xea?\xdbN?]\xfc6U\xdf\xcd" +
	"\x93L\x02\x87\x1bQ\xda\xcb\x1e\xd8\xc3\xd4jxx\xc3" +
	"\xac\xa5W\x8f\xbf\xcd\x95\x85c\xe1\x1dT\x9co\\x" +
	"c\xfc\xfe\xb5\x17\xce\xf1\xd8s \xccb\xf50{t" +
	"[\xfd\x7fo\xeb8>\xfa\x1e\xc8M(\xb8\xb1\xc6\xce" +
	"\xf0W\xd4\x0a\xd2\xe2\x0a\xcagQ\xc56@\xf3\xc9\xb5" +
	"\x1b\x9e\xae\xf8\xec\xb7\xff5\x01\xa8vU\x08(\xeda" +
	"\x94\x8fV\xb4I\xc7\xe8'\xb3\xeb\xbbg\xdfy\xe7\xe0" +
	"\xb9\xf7\x81,qx\x8fU\x94Po\x1c\xab\xa0\xbc\x7f" +
	"\xf8\xc0\xa1\x9f\x9c\xee\xdf\xfd\x01\x1f0\xafV0|\xf8" +
	"\x98\x11\x1c\xf9\xd3\xb6\xd8\xc5{\x96\xfc\x96\xaf\x87E\x95" +
	"\x0b\xe8\x09\xf3+)\xc1\xef\x9b\x7f\xf5\xd9\xa2\xee\xd3\xe7" +
	"'\x08\xd4RY\x82\x92\\I\x05ZS\xd9&\x0d\xd3" +
	"O\xe6\xfc\x8a\x91\xb1\x87\xbe\xb3\xf5w\x96@LE\xa5" +
	"\x92\xf9f\xf4kM\x9f\x7f\xf9\xa5s\xbf\x032_t" +
	"\xeb>`Cw\xe52\x944v\x8eZ\xd9&\xeda" +
	"\xe78\x19\x9b\x9b6\xc3\x95\xa7\xa5]\x95\xb7P\xbc\xa9" +
	"|P\xc2y\x94\xf8\xba\x96\x1d\xe6_\xd4U_\xe0\x95" +
	"\xfc\xb8\x92\x15\xa9KL\x87\x95]\xd1[\xcc\x15=\x17" +
	"&\xc4E\xdd\xbc\x1d(\xb5\xcec\xe8?\xafM\xeag" +
	"\xc79\x00@n\xe4\xea\x9bW`\xc96\xef(J\xfd" +
	"\xf3h\xda\x0e\xcf\xa3\xfez\xe9'O\xdf\xf9\x97\xbb>" +
	"\xbf\xcc{\x1f\xabt\xca\xdb_Ey?\xb7p\xc9\xc0" +
	"\x8e\x97w\x9b\x90\xb7\x96\xd6U1\xccje\xa4\xce?" +
	"\xe5z\xe4\xeau\xab\xe0\x13\x10\x1b\xb4\xaa\x7fC\xe9\x9b" +
	"UT\xd6\xedU\x1fB\xb7\x19W\x0ce\xbd:\xb4\xde" +
	"\xd3\xaf\xc4\xfa\xb4\xa4\x12\x8d)\x03\xc9\x81\xc6\xd6\xa1h" +
	"\xeb\x90\x1a\x1b4\x94\x9e\x84\x1a]\xa5$\xe3bB\xed" +
	"D\x94=\xa2\x97\xcb8\xb4\x1b\x06B:@ E>" +
	"\xb3W5V\xa8=\x83\xbd\x00\xd0\x8c\x9d\x88\x0e\x03!" +
	"\x9b\xc1\xedF@W\x95~\xf7H\x1bG\xd0\x86mB" +
	"\x96\x01\xb4\x14cK\x15\x92\xc5\xbe\x91^\xd5\xf83u" +
	"\xc8 \x18\x91=\x02\xba=%\"@\xde\x1f\x19\xfb\x16" +
	"\x0f\x12,\xc1\xb5S\xe8\xc9\xc4e*&\xd4\xa8<\xe8" +
	"S\xf5a*UP\xf4\x00x\xe8\xe1\x8a\x0e o\x10" +
	"QN\x08H\x10C\x8c\xa3\xb6\x09@\xee\x13Q6\x04" +
	"D!\x84\x02\x00\xd9\xd2\x08 'D\x94\x87\x04$\xa2" +
	"\x10B\x11\x80\x0c\xd6\x03\xc8\x03\"\xca\xf7\x09hj\xc9" +
	"Xb0\xae\xae\x82\x08c\x87\x08\x02\"\xa09\xa0\xab" +
	"\x89\x94\x12_\x01\x01u\xc0\xe8\xc3\xd9 \xe0l\xc0\xa6" +
	"\x8dZ\xc2Pu,\x06\x01\x8b\x01#\x09\xad_3\xec" +
	"\x7f:\x1a\x89\x134Zc\xfd\x00 {\x10\xb9\x9c\xc1" +
	"\xc6&KM\xb9\xd8Q\xae\x95\xca\xdc,\xa2\xbc\x9aS" +
	"\xae}\x19\x80\xbcBD\xb9S@\"d\xb4[C\x7f" +
	"\\%\xa2\xbcV\xc0\xa6>K~\xe2\x9e\x0e\x88\x04p" +
	"d\xab\xaa\xa7\xb5T\xd2\x96yD\x89\xc7u5\x9d\xb6" +
	"\xbf;R\xcf\xca\x96:#2\x1ft+\xb5\x84z\xbb" +
	"\x96\xdc\x1c\x8d\xa7\x92jMW\x93\x9a\x1eL\x18\xe9\xc9" +
	"\xd4\xee\xd4S15\x9d\x8e\x0e\xe8b*f\xe9g\xe9" +
	"\xd2\xba GA\xaaK\xfb\x82\x1c\x05\xc5\x1c\x05}\x03" +
	"Z\xdc\xb6\xb4O\x1dR\xd1\x0f\x02\xfa\x01Gb\xfd\xf1" +
	"\x84\x96t\xbe;\xe2\xf8\x0a\xd7'\xad&\xe3\xcb\xfb\x06" +
	"\x93\x9bk:\x15]\x11\xfb\xd3\xb2\xc7q\x87\x9fF\xcb" +
	"l\x11\xe5\x90\x80\x91\x18%\x9a\xc0)'\x82Wk\x1b" +
	"\xd5\xd8p,\xa1F\xb7)\x9a\xd1\x9a\x8c\xd74\xd1c" +
	"\xfb'\xb5T{\\M\x1a\xdaFM\xd5\x01\xac\xf4s" +
	"\x98\xaf\x03\x90\x8bE\x94\xc34T3d \xaa:\x16" +
	"\x81\x80ES\xc6\\&\x8b\"\x99\xf8Bt\x878B" +
	"\xea\xb9\x0e\xdf\xdf\xc1\xf5\x17\xfe\xda\x88<\xa8\xea\xc3\xe6" +
	"\xca\xc1d\xcc\xd0RI\x00\x08\xac\x1d\x1eP\xe5 \x03" +
	"\x05\xbb\xf2\xa0\x8d\xced\xcb&\x10\x88\xe6C\xb7\x8dA" +
	"\xbb}%w\xf7\x80@\xee\xf0\xa1\xe04\xc3h\xf7\xd5" +
	"\xa4\x9d\xe2S\x8b\x0fEg\x08B\xbb\xc3$7/\x03" +
	"\x81,b\xd8\xc5\xe4\x80\x80\x96J\xa6\x9b\xd1\xfd\xc1\xa7" +
	"\xa5\x92\xd6w*\\\x9a\x81\xdbH\xe6[6\xccy\xf3" +
	"\xc7A\xafj\xb8\xa1\x90\xcf\xef\xbc\xe9\xd5\x0c%\x88\x09" +
	"\x15\x83\xee\xc8\x08\x88A\x98\x94U.\x94e\xc4\xab\xe9" +
	"T\x024\x1cxf\xb5n\x90\x05\x92J\xbf:]v" +
	"N\xac\x06\xd6\xf9\x8c_M\x97\x9a\x1e\xf4%\x8cI\xc3" +
	"8N\xa90\xc8\x0f\xb03\xd1\x83*\x11]\xa1\x1a\x8a" +
	"\x86\x09\x06hN\x85#X\x1fY\xa9\xa9\x898\xcf\xb9" +
	"1\xc3\xb9F\xa0\xf8\xa9&\xe2i\x9c\x0b\xd8)\"\x06" +
	"\xdd'\x01\xe9\x8fS\xa8;\x89\x04\x89(\xe3\x17\x15{" +
	"S\x16O\x0bN\xfc\x1d\xbc\xf7\xfa{\xd4x\\\x8d\x03" +
	"\xe5\x92\xc1\xf7\x02\xab\xcf\xca\xc1&+\x0d\xe4\xd9\xc8\xcd" +
	"\x10\xa4\xa8\x91\x1b\x9e\xbc\x8dM\x96,\x85\x82ym>" +
	"0o\xcc\x07\xe6\x0e\x13\x0b\xcc\xb3b\xa3)\xce\x98b" +
	"\xd0\x95+\xc7\x8fB.\"G\x18$3\x9f\xb9\x0d\xfd" +
	"tE\x88\xfe\xb9\xbb\x18*\xbd@\x041\x84\x1e\x00R" +
	"G\xb3d\x89\x88\xf2Wy\xa9\x9d\xb33R\x0f\xe8\xa9" +
	"X\xa19$\xe4:\xa4\xc9\xf2\x08\x13\xda]\xbf\xb8B" +
	"\xe7\x89\xb4\x10/\x8c\xf3\x8c%\xcc\x14\x9e\xcf\x86\x04\xbb" +
	"\xbe\x15\x88\x09\xdc\xce-K\x9f\x09\xc0\xbc&\x95L%" +
	"4\xa3\x8fa}\xa7\xe8e\x91\xe54\xc6\x00nkN" +
	"\x9b\xd6\xfc\xc2N,fTsDnT*\xea\xe0\xfa" +
	"\xe3\xa2F\xd3.v\x00P\xa8\xe5\x9c\xe7s,W\x18" +
	"\xcc\xa5\xf3Z\xb0\xde\x05\x83\x88A\xa9\\,\xe0\x86\xee" +
	"i\xb0\xc0V\xdfe\x98i6\xd44Er_\x0e\xb8" +
	"\xf2\xca\xc5R\xc9\x8d\x1a\xc5>g2\xbc\"\x0cO\xd7" +
	"tF\x94\\\x10\xe7!v\x0b-\xa2\x18tkn\x0e" +
	"\x9b\x99v[\x19v\x85\x02\xa4]'\xb5T\x92U\x83" +
	"\x84\x81\xe9i\xfd\x9d\x036\x93\xa5\xe4\xf2T\x80\xda\x90" +
	"%\xa4;lc\x97\xd9\xa9\xabq-\xa6\x18\x80j\xbe" +
	"\xa4Y(\xb0\xb6\xda\"\x11y\xcf;\xa7\xe4x\xde7" +
	"\x1d8[\x1af\xd5?\x0a\x89\x13\x1a.o\xa1\x07Y" +
	"\xdd\x92;\x03\xd9\xbb3\xb4\x17$\x84tqc\x95\xa1" +
	"h\x80\x89)\xfb\x8d\xc9\x9a\x80.52!9\xf2z" +
	"\xc5YLM\x9d\x85\xf9\xfb\x9a|\x9d\xc0\x14 \xc6\x0d" +
	"\xd1Y\xd1\xea\xc9\x1d\x15\xe9\xa4\x18\xcd\x0c\x80\x94I " +
	"W\x95\xac\x86F\x1d2\xb0\x04\xb9i\x10\x00K\xae8" +
	"\xc3\xf3\xb1\xb3-G\x8bg\x9aI\x87\x84g\xd7\x8c\x13" +
	"&R:\xa4\x96\xd3 F\x16\x85N0r\xcb\xad," +
	"{\x8b\x93u`\xbe\x1e\x8a\xa5\x88\xdc\x1dL\xe1\xd5\xc9" +
	"y&\x87\xdb\xac\x02#6\xd3\x04\xdd\xa94\xe9\x9ab" +
	"\x0b\xe2\xac\xa6h?\xd6\xa5${\xb3J{m\xc1-" +
	"\xc9\x82LK\x12\xcf\xe9J\x03\x14\xb9s\x10;\x08\xe8" +
	"\x1b\x88qI\xed\x08\x91\x93\xd4\x854\x97\xec3ry" +
	"h/\x07\xd1^lM\x9f\x87Bn~D\xd8Wf" +
	" \xf7&\x00\xd7\x99\xad\\\x0ed\xd8\xd9\xf76h\xaf" +
	"\xb4\x09\xd1\x1dv\x8c\x1e\",\xc1\x9a1{\xa2\xe7J" +
	"\xf6\x04\x0fv\xa9\xbdZ\xda\xd0\x15=\xaa\xb3O\xaa\x9e" +
	"\x89\xf2\x1a\x0b\xad\x00\xf8hY\xe6F\xcbH\xe6$$" +
	"\xee\xdeyf\xe1\xc2\x97\x83|\xcc\xa6\x1d?<\xd39" +
	"M\x1cPY\x03\xe2^G\x155r;\xf5?b\x8b" +
	"\x9c\x83\x8f\x93\xb4\xc8\x8e\\3B\xb6L3q%>" +
	"\xb5\xab\xae\xf3\xec\xec+-f\xd6Ii\x98\x0cK\xa6" +
	"\x1d\x03&Y\xcc\xacR\x02\x99bG\xbbP\x1a\xc6\xce" +
	"\x96z\xaa0\x9ej\xf0\xcc\x8c\xd1S\xf7\xd8\x19\x0b\xa5" +
	"'X\xd7W(2\xf0\xd6\xc9e\xe9-\xb4\xb1\xc2\xcd" +
	"\x14^f\xb3|\xb7\xaf\x8f1y\xe4\xf9m\x0d\xfb\xd6" +
	"\xff-\xa9\xebb\x1b\x08to\xe9\xd0\xbe\xa8&\xd5t" +
	"\x02\">\xd3^\x1b\x01nn\xc6\x00m\xd3\xb2\x11H" +
	"\xcc\xed\x9bh\xdb\x14\xed\xd4\xd5&\xd6\x03\xa99\xbb\x9e" +
	"\x1d\\]\xee\xd1\x92\x8a>\xdc\xa9\xa0\xd1\xd7\xa5\xf6\xaa" +
	"C0!#\xe7L\xb7t\xb2\xc3\xc6~`JW\xfc" +
	"\x91k*w1\x90\x05[\xbe\x99V9\xab\xc8E\xbb" +
	"\x02\xb4\xa8Y\xfe\xb3\xe5]D\xdb\xef\x1a\x11\xe5%\x1c" +
	"\x8e,\xa6%l\xa1\x88\xf2M\x02F\xd2\x86\xa2\x1b\xf6" +
	"\xe6\xcc\xa7&\xe3\xd3m\xd1\x1c\xa3\x82[\x89\xec\x17\x09" +
	"\xd0\xbe:\"d\x19\x08\xc4\xeb\x1b\xc9\x18>;\x06\xa6" +
	"\xdfB\xba\x11\xbd<\x954\xd4\xa4a!4N\xdaN" +
	"\xa5\xb5\xe4f$\xee\xa8w\xc5\xa5 \x9d\x8f\xd3L\x86" +
	"\x98+J\xd8|-i^8\x9b\x0c\xb2\xc5\xc9@\x18" +
	"u\xd7M\xf6\x9d+\xdaw\x9e\x84\xec\xb0*\xb8\x0d\xd4" +
	"h/\xe5\xff\xff\x0ec\xa9&\x1aS\xe1^vC\xcb" +
	"\xc5\x93\xfd\x1a\x01\xdaw\xdf\x84lrZ\x0d\x06\xd5\x10" +
	"\xa0m\xef\x94\xcdM\xeb\x10\xc5\x0e\xe4\xdf\xbc!\xcb\xb8" +
	"\xcbr\xff:\xee\xbd\x0b\x7f\xfdHF\x9a\xac\xd6'b" +
	"\xadY,@\xb4\xafi\xd1\xbe\x06%u=6 \xda" +
	"wch\xbf\x9eA\xaaisT\xca$f'\x83/" +
	"\xa9d\xb6\xb5\xd9\xcd\x12\xaf\xc2L\xe2\xd460\x1f3" +
	"]\xdcX\xb9\xd1^V#\xd7\x80r/4L\xd5\x80" +
	"N\xeaa\xceI\xf6\x85,\xda\x17\xa1\x84\xacs\x9c\xc4" +
	"\xa2\x00\xc4\xa41\xa39\xd0\xc5\xb6\x08\x0bxV\x80\xdd" +
	"7\x16\xb0\xc3\xb4\xd1\x0eXr80\xb7\x1b@\xbeA" +
	"Dy\x15\x07s\xad]\x99vi\x035FJ\xefW" +
	"\x12\x9d\x0a\xeaJ\xbfj\xa8z\x1a\xc05\x8a\xc3!c" +
	"\x94\xad6\x13\xder\xb9D\x85\xae\xcc\xf2\xecD\xae`" +
	"\x8b>\xe3\xddo@\x1fL\x1b\x94i\x10\xad{#\x7f" +
	"\x0f\xc7u \xa1\xc4\xd4\xbeT\x02|qU\x9fpW" +
	"7Sf\x90s\x13I\x81\xf9\xeb\"\xca}\x9c7\xd4" +
	"Z\xf7z\xd2/\x98&:/^\x11\xad\x12\x04\xbfx" +
	"\xd9D\xee\x06\x99\xc8\xb5 \x142_\x89\xbd)\xa6\xea" +
	"\xff\x05\x00\x00\xff\xff\x9d\xd8\xcd~"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a5f26ade549e9db5,
		Nodes: []uint64{
			0x8109b8da721ce8c5,
			0x84069a7f843bfddd,
			0x844cbf3485f18bc7,
			0x845e3b014cb99f7d,
			0x878c54fc3316539c,
			0x889de46e044752e4,
			0x8ba29bd012b7ef86,
			0x8c2aa6b5597e9212,
			0x8d1fa8491f7ca82a,
			0x8ddce4178a77936e,
			0x92ff0dd57eb6df25,
			0x93794522d6608992,
			0x94b20ce1d03b93fb,
			0x952b879acd0b9e34,
			0x9aabe70d7a304a00,
			0x9ac608ff7fa50c51,
			0xa07ce2c64c52e0d1,
			0xa173b6208f4138e1,
			0xa29faa3d9788e9c4,
			0xa2f25f8b0143e06e,
			0xa3611cf8caa67307,
			0xa4921750cc59ea66,
			0xa5a89f5e84d678b1,
			0xa7864812635bd886,
			0xa966164529502f4f,
			0xab3885956b5bddb2,
			0xac6ffe76feadd8b7,
			0xb2a52ed3317d85eb,
			0xb609e173123eed47,
			0xb9d765574a76212d,
			0xba5ffabbd2930101,
			0xbc5bf1f5cdc6c612,
			0xbf37f2a05ed1cd63,
			0xbf39324c38e6c849,
			0xbf8ac61fd79e84bb,
			0xc0104a5c052c0c9b,
			0xc0410d2e279f9226,
			0xc1ab040756edc81e,
			0xc5d33a433450b3b2,
			0xc7958d702fc82501,
			0xc81df90babfab2e6,
			0xcc901063f4eb0263,
			0xcd9b2c8b9a9ddf2a,
			0xcdc496179ffe7754,
			0xce72e863056ab4ad,
			0xd4b6e28f092175dd,
			0xd8e5d27359a5c39a,
			0xd978187dfa9d59d4,
			0xde0ca4ca47cb48e9,
			0xdedd203806608933,
			0xe0f5547eddd8f57b,
			0xe292b64a77ec3277,
			0xe3f0f119a46054a0,
			0xe4e0a5dfdfd19c52,
			0xe58a6dcabeab86b8,
			0xf0305efa63474bb1,
			0xf2ca5929f1dc40f8,
			0xf37694889d7f1921,
			0xf3e0ce36f43f5792,
			0xf4fe7b7026d7e809,
			0xf51d3183ff824127,
			0xf56244ff372e5246,
			0xfb182d3ce5b55564,
			0xfef4858e56a4bece,
			0xff8ad082703028ba,
			0xffbf40d1d673143a,
		},
		Compressed: true,
	})
}
