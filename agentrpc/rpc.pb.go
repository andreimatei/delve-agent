// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: rpc.proto

package agentrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTypeInfoIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary for which type information is requested.
	BinaryId int64  `protobuf:"varint,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *GetTypeInfoIn) Reset() {
	*x = GetTypeInfoIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeInfoIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeInfoIn) ProtoMessage() {}

func (x *GetTypeInfoIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeInfoIn.ProtoReflect.Descriptor instead.
func (*GetTypeInfoIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetTypeInfoIn) GetBinaryId() int64 {
	if x != nil {
		return x.BinaryId
	}
	return 0
}

func (x *GetTypeInfoIn) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type FieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	TypeName  string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// embedded is set for Golang types if this field is embedded in its parent
	// type.
	Embedded bool `protobuf:"varint,3,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *FieldInfo) Reset() {
	*x = FieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldInfo) ProtoMessage() {}

func (x *FieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldInfo.ProtoReflect.Descriptor instead.
func (*FieldInfo) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *FieldInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FieldInfo) GetEmbedded() bool {
	if x != nil {
		return x.Embedded
	}
	return false
}

type GetTypeInfoOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldInfo `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetTypeInfoOut) Reset() {
	*x = GetTypeInfoOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeInfoOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeInfoOut) ProtoMessage() {}

func (x *GetTypeInfoOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeInfoOut.ProtoReflect.Descriptor instead.
func (*GetTypeInfoOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetTypeInfoOut) GetFields() []*FieldInfo {
	if x != nil {
		return x.Fields
	}
	return nil
}

type VarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the variable.
	VarName  string `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// FormalParameter is set for function arguments, as opposed to other
	// variables.
	FormalParameter bool `protobuf:"varint,3,opt,name=formal_parameter,json=formalParameter,proto3" json:"formal_parameter,omitempty"`
	// loclist_available is set if there is a loclist for this variable covering
	// the query's program counter. The loclist has to cover the variable in its
	// entirety; a loclist cover only part of the variable is not sufficient.
	LoclistAvailable bool `protobuf:"varint,4,opt,name=loclist_available,json=loclistAvailable,proto3" json:"loclist_available,omitempty"`
}

func (x *VarInfo) Reset() {
	*x = VarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarInfo) ProtoMessage() {}

func (x *VarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarInfo.ProtoReflect.Descriptor instead.
func (*VarInfo) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *VarInfo) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *VarInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *VarInfo) GetFormalParameter() bool {
	if x != nil {
		return x.FormalParameter
	}
	return false
}

func (x *VarInfo) GetLoclistAvailable() bool {
	if x != nil {
		return x.LoclistAvailable
	}
	return false
}

type TypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// has_fields is set for non-empty structs (i.e. structs with one or more
	// fields) to indicate that the type has children.
	HasFields bool `protobuf:"varint,2,opt,name=has_fields,json=hasFields,proto3" json:"has_fields,omitempty"`
	// The fields of the type. This is only set if has_fields is set and
	// fields_not_loaded is not set.
	Fields []*FieldInfo `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// fields_not_loaded is set if `fields` has been left empty even though the
	// type does have fields because the recursion limit was reached.
	FieldsNotLoaded bool `protobuf:"varint,4,opt,name=fields_not_loaded,json=fieldsNotLoaded,proto3" json:"fields_not_loaded,omitempty"`
}

func (x *TypeInfo) Reset() {
	*x = TypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeInfo) ProtoMessage() {}

func (x *TypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeInfo.ProtoReflect.Descriptor instead.
func (*TypeInfo) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *TypeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeInfo) GetHasFields() bool {
	if x != nil {
		return x.HasFields
	}
	return false
}

func (x *TypeInfo) GetFields() []*FieldInfo {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TypeInfo) GetFieldsNotLoaded() bool {
	if x != nil {
		return x.FieldsNotLoaded
	}
	return false
}

// ListVarsIn is the input to the ListVars RPC. It specifies a code location for
// which variable information is requested. The location is specified as the
// encompassing function, and the program counter offset from the beginning of
// the function.
type ListVarsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary for which variable information is requested.
	BinaryId int64  `protobuf:"varint,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	FuncName string `protobuf:"bytes,2,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	// The program counter offset from the beginning on the function. O means the
	// very beginning of the function, effectively making only the function
	// arguments available.
	PcOffset int64 `protobuf:"varint,3,opt,name=pc_offset,json=pcOffset,proto3" json:"pc_offset,omitempty"`
	// The maximum number of levels of recursive exploration for type definitions.
	// 0 means that only the types of the variables are returned, but not their
	// fields.
	// Exploration of pointer types does not count towards this limit. For
	// example, if a variable has type *main.T, only main.T will be included in
	// the result, and going from *T to T does not consume one recursion level.
	TypeRecursionLimit int32 `protobuf:"varint,4,opt,name=type_recursion_limit,json=typeRecursionLimit,proto3" json:"type_recursion_limit,omitempty"`
}

func (x *ListVarsIn) Reset() {
	*x = ListVarsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVarsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVarsIn) ProtoMessage() {}

func (x *ListVarsIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVarsIn.ProtoReflect.Descriptor instead.
func (*ListVarsIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *ListVarsIn) GetBinaryId() int64 {
	if x != nil {
		return x.BinaryId
	}
	return 0
}

func (x *ListVarsIn) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *ListVarsIn) GetPcOffset() int64 {
	if x != nil {
		return x.PcOffset
	}
	return 0
}

func (x *ListVarsIn) GetTypeRecursionLimit() int32 {
	if x != nil {
		return x.TypeRecursionLimit
	}
	return 0
}

// ListVarsOut is the output of the ListVars RPC. It contains information on variables
// in scope at the specified code location. The variables are returned in
type ListVarsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars []*VarInfo `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	// types contains the definitions of the types used by either the variables in
	// `vars`, or one or more of their fields, recursively. The map is keyed by
	// type name.
	//
	// The query specified a limit for the recursion, so some types might not be
	// fully loaded (see `fields_not_loaded`).
	//
	// Pointer types are NOT included in these results. If a variable or field has
	// type *main.T, types will contain the definition of `main.T`, and the client
	// infers that the respective variable is a pointer based on its type name
	// starting with '*'.
	Types map[string]*TypeInfo `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListVarsOut) Reset() {
	*x = ListVarsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVarsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVarsOut) ProtoMessage() {}

func (x *ListVarsOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVarsOut.ProtoReflect.Descriptor instead.
func (*ListVarsOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *ListVarsOut) GetVars() []*VarInfo {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *ListVarsOut) GetTypes() map[string]*TypeInfo {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListFunctionsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary for which function information is requested.
	BinaryId int64 `protobuf:"varint,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	// filter, if not empty, specifies a string that needs to be contained in a
	// function name for it to be included in the result.
	// TODO: smart case?
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of results. 0 means no limit.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListFunctionsIn) Reset() {
	*x = ListFunctionsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFunctionsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFunctionsIn) ProtoMessage() {}

func (x *ListFunctionsIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFunctionsIn.ProtoReflect.Descriptor instead.
func (*ListFunctionsIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *ListFunctionsIn) GetBinaryId() int64 {
	if x != nil {
		return x.BinaryId
	}
	return 0
}

func (x *ListFunctionsIn) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListFunctionsIn) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListFunctionsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funcs []string `protobuf:"bytes,1,rep,name=Funcs,proto3" json:"Funcs,omitempty"`
}

func (x *ListFunctionsOut) Reset() {
	*x = ListFunctionsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFunctionsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFunctionsOut) ProtoMessage() {}

func (x *ListFunctionsOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFunctionsOut.ProtoReflect.Descriptor instead.
func (*ListFunctionsOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *ListFunctionsOut) GetFuncs() []string {
	if x != nil {
		return x.Funcs
	}
	return nil
}

// ListTypesIn and ListTypesOut mimic the corresponding RPC from Delve.
type ListTypesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary for which types information is requested.
	BinaryId int64 `protobuf:"varint,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	// filter, if not empty, specifies a string that needs to be contained in a
	// function name for it to be included in the result.
	// TODO: smart case?
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of results. 0 means no limit.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListTypesIn) Reset() {
	*x = ListTypesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTypesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTypesIn) ProtoMessage() {}

func (x *ListTypesIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTypesIn.ProtoReflect.Descriptor instead.
func (*ListTypesIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *ListTypesIn) GetBinaryId() int64 {
	if x != nil {
		return x.BinaryId
	}
	return 0
}

func (x *ListTypesIn) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTypesIn) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListTypesOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []string `protobuf:"bytes,1,rep,name=Types,proto3" json:"Types,omitempty"`
}

func (x *ListTypesOut) Reset() {
	*x = ListTypesOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTypesOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTypesOut) ProtoMessage() {}

func (x *ListTypesOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTypesOut.ProtoReflect.Descriptor instead.
func (*ListTypesOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *ListTypesOut) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type FrameSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncName    string   `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	Expressions []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *FrameSpec) Reset() {
	*x = FrameSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSpec) ProtoMessage() {}

func (x *FrameSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSpec.ProtoReflect.Descriptor instead.
func (*FrameSpec) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *FrameSpec) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *FrameSpec) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type TypeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName    string   `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	CollectAll  bool     `protobuf:"varint,2,opt,name=collect_all,json=collectAll,proto3" json:"collect_all,omitempty"`
	Expressions []string `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *TypeSpec) Reset() {
	*x = TypeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec) ProtoMessage() {}

func (x *TypeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec.ProtoReflect.Descriptor instead.
func (*TypeSpec) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *TypeSpec) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeSpec) GetCollectAll() bool {
	if x != nil {
		return x.CollectAll
	}
	return false
}

func (x *TypeSpec) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type GetSnapshotIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary for which function information is requested.
	BinaryId int64 `protobuf:"varint,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	// FrameSpec maps from function name to list of expressions to evaluate and
	// collect.
	FrameSpecs []*FrameSpec `protobuf:"bytes,2,rep,name=frame_specs,json=frameSpecs,proto3" json:"frame_specs,omitempty"`
	// TypeSpecs contains specific instructions about what to collect when one of
	// these types is encountered.
	TypeSpecs []*TypeSpec `protobuf:"bytes,3,rep,name=type_specs,json=typeSpecs,proto3" json:"type_specs,omitempty"`
}

func (x *GetSnapshotIn) Reset() {
	*x = GetSnapshotIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSnapshotIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotIn) ProtoMessage() {}

func (x *GetSnapshotIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotIn.ProtoReflect.Descriptor instead.
func (*GetSnapshotIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetSnapshotIn) GetBinaryId() int64 {
	if x != nil {
		return x.BinaryId
	}
	return 0
}

func (x *GetSnapshotIn) GetFrameSpecs() []*FrameSpec {
	if x != nil {
		return x.FrameSpecs
	}
	return nil
}

func (x *GetSnapshotIn) GetTypeSpecs() []*TypeSpec {
	if x != nil {
		return x.TypeSpecs
	}
	return nil
}

type CapturedExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CapturedExpression) Reset() {
	*x = CapturedExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapturedExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapturedExpression) ProtoMessage() {}

func (x *CapturedExpression) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapturedExpression.ProtoReflect.Descriptor instead.
func (*CapturedExpression) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *CapturedExpression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CapturedExpression) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// FrameData represents the data captured for a single stack frame.
type FrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoroutineId int64 `protobuf:"varint,1,opt,name=goroutine_id,json=goroutineId,proto3" json:"goroutine_id,omitempty"`
	// The index of the frame in the stack. 0 is the leaf function.
	FrameIdx      int64                 `protobuf:"varint,2,opt,name=frame_idx,json=frameIdx,proto3" json:"frame_idx,omitempty"`
	CapturedExprs []*CapturedExpression `protobuf:"bytes,3,rep,name=captured_exprs,json=capturedExprs,proto3" json:"captured_exprs,omitempty"`
}

func (x *FrameData) Reset() {
	*x = FrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameData) ProtoMessage() {}

func (x *FrameData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameData.ProtoReflect.Descriptor instead.
func (*FrameData) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *FrameData) GetGoroutineId() int64 {
	if x != nil {
		return x.GoroutineId
	}
	return 0
}

func (x *FrameData) GetFrameIdx() int64 {
	if x != nil {
		return x.FrameIdx
	}
	return 0
}

func (x *FrameData) GetCapturedExprs() []*CapturedExpression {
	if x != nil {
		return x.CapturedExprs
	}
	return nil
}

type GetSnapshotOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// // Map from goroutine ID to map from frame index to array of captured values.
	// // The frame indexes match the order in Stacks - from leaf function to
	// // callers.
	FrameData []*FrameData `protobuf:"bytes,2,rep,name=frame_data,json=frameData,proto3" json:"frame_data,omitempty"`
}

func (x *GetSnapshotOut) Reset() {
	*x = GetSnapshotOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSnapshotOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotOut) ProtoMessage() {}

func (x *GetSnapshotOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotOut.ProtoReflect.Descriptor instead.
func (*GetSnapshotOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetSnapshotOut) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *GetSnapshotOut) GetFrameData() []*FrameData {
	if x != nil {
		return x.FrameData
	}
	return nil
}

type ListProcessesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The results are processes that match one or more of these predicates.
	Predicates []*ListProcessesIn_TargetSpec `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
}

func (x *ListProcessesIn) Reset() {
	*x = ListProcessesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesIn) ProtoMessage() {}

func (x *ListProcessesIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesIn.ProtoReflect.Descriptor instead.
func (*ListProcessesIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *ListProcessesIn) GetPredicates() []*ListProcessesIn_TargetSpec {
	if x != nil {
		return x.Predicates
	}
	return nil
}

type ListProcessesOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reports contains an entry for every connected agent.
	Reports []*AgentReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *ListProcessesOut) Reset() {
	*x = ListProcessesOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesOut) ProtoMessage() {}

func (x *ListProcessesOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesOut.ProtoReflect.Descriptor instead.
func (*ListProcessesOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *ListProcessesOut) GetReports() []*AgentReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

// AgentReport is the information reported by a single agent about the processes
// of interest it recognized on its host.
type AgentReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the host where the agent is running.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The IP addresses of the host where the agent is running.
	IpAddress    [][]byte `protobuf:"bytes,2,rep,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	AgentVersion string   `protobuf:"bytes,3,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// processes can be empty if the agent did not find any processes matching the
	// predicates in the query.
	Processes []*Process `protobuf:"bytes,4,rep,name=processes,proto3" json:"processes,omitempty"`
	// agent_id is a unique identifier for the agent. The ID is referenced by the
	// CaptureSnapshot RPC in order to identify which machine to collect process
	// snapshots from. If the server has a stable, unique identifier for an agent
	// (e.g. if the agent's IP or hostname are unique), then it will use that. If
	// two agents cannot be distinguished by the server (e.g. if two agents are
	// running on the same machine, probably by mistake), then the server will
	// generate synthetic identifiers. In this case, however, the IDs are not
	// usable after a server restart (i.e. CaptureSnapshot RPCs using them will
	// fail).
	//
	// TODO: Ideally, such an agent identifier would not make it to the client. If
	// the client does not have another unique way to identify between two or more
	// agents (e.g. IP, hostname, PID of target process running on that agent's
	// machine, etc.), then the ultimate human user also has no way to
	// disambiguate between the respective agents, and thus they shouldn't be
	// asked to. The server should thus find ways to deal with indistinguishable
	// agents in a way that is transparent to the client.
	AgentId string `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *AgentReport) Reset() {
	*x = AgentReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentReport) ProtoMessage() {}

func (x *AgentReport) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentReport.ProtoReflect.Descriptor instead.
func (*AgentReport) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *AgentReport) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AgentReport) GetIpAddress() [][]byte {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *AgentReport) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *AgentReport) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *AgentReport) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Binary  *Binary  `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
	Command [][]byte `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	// The index(es) of the TargetSpec that matched this process within the
	// ListProcessesIn.predicates.
	MatchIdx int32 `protobuf:"varint,4,opt,name=match_idx,json=matchIdx,proto3" json:"match_idx,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *Process) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetBinary() *Binary {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *Process) GetCommand() [][]byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Process) GetMatchIdx() int32 {
	if x != nil {
		return x.MatchIdx
	}
	return 0
}

type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the binary. The same binary will result in the same
	// identifier every time.
	ID   []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Path []byte `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *Binary) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Binary) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type DownloadBinaryIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary_id identifies the binary to make durable.
	BinaryId []byte `protobuf:"bytes,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	// processes_config has information useful for finding the binary. The
	// assumption is that the binary corresponds to one or more processes returned
	// by a ListProcesses(process_config) call.
	ProcessesConfig *ListProcessesIn `protobuf:"bytes,2,opt,name=processes_config,json=processesConfig,proto3" json:"processes_config,omitempty"`
}

func (x *DownloadBinaryIn) Reset() {
	*x = DownloadBinaryIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBinaryIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBinaryIn) ProtoMessage() {}

func (x *DownloadBinaryIn) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBinaryIn.ProtoReflect.Descriptor instead.
func (*DownloadBinaryIn) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *DownloadBinaryIn) GetBinaryId() []byte {
	if x != nil {
		return x.BinaryId
	}
	return nil
}

func (x *DownloadBinaryIn) GetProcessesConfig() *ListProcessesIn {
	if x != nil {
		return x.ProcessesConfig
	}
	return nil
}

type DownloadBinaryOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DownloadBinaryOut) Reset() {
	*x = DownloadBinaryOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBinaryOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBinaryOut) ProtoMessage() {}

func (x *DownloadBinaryOut) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBinaryOut.ProtoReflect.Descriptor instead.
func (*DownloadBinaryOut) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{23}
}

// TargetSpec defines a predicate for matching processes. All present fields
// are ANDed together.
type ListProcessesIn_TargetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ProcessName string `protobuf:"bytes,2,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	BinaryPath  string `protobuf:"bytes,3,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
}

func (x *ListProcessesIn_TargetSpec) Reset() {
	*x = ListProcessesIn_TargetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesIn_TargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesIn_TargetSpec) ProtoMessage() {}

func (x *ListProcessesIn_TargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesIn_TargetSpec.ProtoReflect.Descriptor instead.
func (*ListProcessesIn_TargetSpec) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListProcessesIn_TargetSpec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ListProcessesIn_TargetSpec) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ListProcessesIn_TargetSpec) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x72, 0x70, 0x63, 0x1a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e,
	0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x73, 0x4f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x4c, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x75, 0x6e, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x46, 0x75, 0x6e, 0x63, 0x73, 0x22, 0x58, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x24, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x43, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x49, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x43, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x78, 0x22, 0x2c, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x75, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x13, 0x0a,
	0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f,
	0x75, 0x74, 0x32, 0x9f, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x48, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x1a, 0x1a, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x1a, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x1a, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x6e, 0x1a, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x1a, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x73, 0x49, 0x6e, 0x1a, 0x15, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x73, 0x4f, 0x75, 0x74, 0x32, 0x53, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x1a,
	0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x76, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_rpc_proto_goTypes = []interface{}{
	(*GetTypeInfoIn)(nil),              // 0: agentrpc.GetTypeInfoIn
	(*FieldInfo)(nil),                  // 1: agentrpc.FieldInfo
	(*GetTypeInfoOut)(nil),             // 2: agentrpc.GetTypeInfoOut
	(*VarInfo)(nil),                    // 3: agentrpc.VarInfo
	(*TypeInfo)(nil),                   // 4: agentrpc.TypeInfo
	(*ListVarsIn)(nil),                 // 5: agentrpc.ListVarsIn
	(*ListVarsOut)(nil),                // 6: agentrpc.ListVarsOut
	(*ListFunctionsIn)(nil),            // 7: agentrpc.ListFunctionsIn
	(*ListFunctionsOut)(nil),           // 8: agentrpc.ListFunctionsOut
	(*ListTypesIn)(nil),                // 9: agentrpc.ListTypesIn
	(*ListTypesOut)(nil),               // 10: agentrpc.ListTypesOut
	(*FrameSpec)(nil),                  // 11: agentrpc.FrameSpec
	(*TypeSpec)(nil),                   // 12: agentrpc.TypeSpec
	(*GetSnapshotIn)(nil),              // 13: agentrpc.GetSnapshotIn
	(*CapturedExpression)(nil),         // 14: agentrpc.CapturedExpression
	(*FrameData)(nil),                  // 15: agentrpc.FrameData
	(*GetSnapshotOut)(nil),             // 16: agentrpc.GetSnapshotOut
	(*ListProcessesIn)(nil),            // 17: agentrpc.ListProcessesIn
	(*ListProcessesOut)(nil),           // 18: agentrpc.ListProcessesOut
	(*AgentReport)(nil),                // 19: agentrpc.AgentReport
	(*Process)(nil),                    // 20: agentrpc.Process
	(*Binary)(nil),                     // 21: agentrpc.Binary
	(*DownloadBinaryIn)(nil),           // 22: agentrpc.DownloadBinaryIn
	(*DownloadBinaryOut)(nil),          // 23: agentrpc.DownloadBinaryOut
	nil,                                // 24: agentrpc.ListVarsOut.TypesEntry
	(*ListProcessesIn_TargetSpec)(nil), // 25: agentrpc.ListProcessesIn.TargetSpec
	(*Profile)(nil),                    // 26: perftools.profiles.Profile
}
var file_rpc_proto_depIdxs = []int32{
	1,  // 0: agentrpc.GetTypeInfoOut.fields:type_name -> agentrpc.FieldInfo
	1,  // 1: agentrpc.TypeInfo.fields:type_name -> agentrpc.FieldInfo
	3,  // 2: agentrpc.ListVarsOut.vars:type_name -> agentrpc.VarInfo
	24, // 3: agentrpc.ListVarsOut.types:type_name -> agentrpc.ListVarsOut.TypesEntry
	11, // 4: agentrpc.GetSnapshotIn.frame_specs:type_name -> agentrpc.FrameSpec
	12, // 5: agentrpc.GetSnapshotIn.type_specs:type_name -> agentrpc.TypeSpec
	14, // 6: agentrpc.FrameData.captured_exprs:type_name -> agentrpc.CapturedExpression
	26, // 7: agentrpc.GetSnapshotOut.profile:type_name -> perftools.profiles.Profile
	15, // 8: agentrpc.GetSnapshotOut.frame_data:type_name -> agentrpc.FrameData
	25, // 9: agentrpc.ListProcessesIn.predicates:type_name -> agentrpc.ListProcessesIn.TargetSpec
	19, // 10: agentrpc.ListProcessesOut.reports:type_name -> agentrpc.AgentReport
	20, // 11: agentrpc.AgentReport.processes:type_name -> agentrpc.Process
	21, // 12: agentrpc.Process.binary:type_name -> agentrpc.Binary
	17, // 13: agentrpc.DownloadBinaryIn.processes_config:type_name -> agentrpc.ListProcessesIn
	4,  // 14: agentrpc.ListVarsOut.TypesEntry.value:type_name -> agentrpc.TypeInfo
	17, // 15: agentrpc.DebugInfo.ListProcesses:input_type -> agentrpc.ListProcessesIn
	22, // 16: agentrpc.DebugInfo.DownloadBinary:input_type -> agentrpc.DownloadBinaryIn
	7,  // 17: agentrpc.DebugInfo.ListFunctions:input_type -> agentrpc.ListFunctionsIn
	9,  // 18: agentrpc.DebugInfo.ListTypes:input_type -> agentrpc.ListTypesIn
	0,  // 19: agentrpc.DebugInfo.GetTypeInfo:input_type -> agentrpc.GetTypeInfoIn
	5,  // 20: agentrpc.DebugInfo.ListVars:input_type -> agentrpc.ListVarsIn
	13, // 21: agentrpc.SnapshotService.GetSnapshot:input_type -> agentrpc.GetSnapshotIn
	18, // 22: agentrpc.DebugInfo.ListProcesses:output_type -> agentrpc.ListProcessesOut
	23, // 23: agentrpc.DebugInfo.DownloadBinary:output_type -> agentrpc.DownloadBinaryOut
	8,  // 24: agentrpc.DebugInfo.ListFunctions:output_type -> agentrpc.ListFunctionsOut
	10, // 25: agentrpc.DebugInfo.ListTypes:output_type -> agentrpc.ListTypesOut
	2,  // 26: agentrpc.DebugInfo.GetTypeInfo:output_type -> agentrpc.GetTypeInfoOut
	6,  // 27: agentrpc.DebugInfo.ListVars:output_type -> agentrpc.ListVarsOut
	16, // 28: agentrpc.SnapshotService.GetSnapshot:output_type -> agentrpc.GetSnapshotOut
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	file_profile_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeInfoIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeInfoOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVarsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVarsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFunctionsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFunctionsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTypesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTypesOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSnapshotIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapturedExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSnapshotOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBinaryIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBinaryOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesIn_TargetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}
