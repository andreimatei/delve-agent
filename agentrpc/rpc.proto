syntax = "proto3";
package agentrpc;
option go_package = "github.com/andreimatei/delve-agent/agentrpc";

import "profile.proto";

message GetTypeInfoIn {
  // binary_id identifies the binary for which type information is requested.
  int64 binary_id = 1;
  string type_name = 2;
}

message FieldInfo {
  string field_name = 1;
  string type_name = 2;
  // embedded is set for Golang types if this field is embedded in its parent
  // type.
  bool embedded = 3;
}

message GetTypeInfoOut {
  repeated FieldInfo fields = 1;
}

message VarInfo {
  // The name of the variable.
  string var_name = 1;
  string type_name = 2;
  // FormalParameter is set for function arguments, as opposed to other
  // variables.
  bool formal_parameter = 3;
  // loclist_available is set if there is a loclist for this variable covering
  // the query's program counter. The loclist has to cover the variable in its
  // entirety; a loclist cover only part of the variable is not sufficient.
  bool loclist_available = 4;
}

message TypeInfo {
  string name = 1;
  // has_fields is set for non-empty structs (i.e. structs with one or more
  // fields) to indicate that the type has children.
  bool has_fields = 2;
  // The fields of the type. This is only set if has_fields is set and
  // fields_not_loaded is not set.
  repeated FieldInfo fields = 3;
  // fields_not_loaded is set if `fields` has been left empty even though the
  // type does have fields because the recursion limit was reached.
  bool fields_not_loaded = 4;
}

// ListVarsIn is the input to the ListVars RPC. It specifies a code location for
// which variable information is requested. The location is specified as the
// encompassing function, and the program counter offset from the beginning of
// the function.
message ListVarsIn {
  // binary_id identifies the binary for which variable information is requested.
  int64 binary_id = 1;
  string func_name = 2;
  // The program counter offset from the beginning on the function. O means the
  // very beginning of the function, effectively making only the function
  // arguments available.
  int64 pc_offset = 3;
  // The maximum number of levels of recursive exploration for type definitions.
  // 0 means that only the types of the variables are returned, but not their
  // fields.
  // Exploration of pointer types does not count towards this limit. For
  // example, if a variable has type *main.T, only main.T will be included in
  // the result, and going from *T to T does not consume one recursion level.
  int32 type_recursion_limit = 4;
}

// ListVarsOut is the output of the ListVars RPC. It contains information on variables
// in scope at the specified code location. The variables are returned in
message ListVarsOut {
  repeated VarInfo vars = 1;

  // types contains the definitions of the types used by either the variables in
  // `vars`, or one or more of their fields, recursively. The map is keyed by
  // type name.
  // 
  // The query specified a limit for the recursion, so some types might not be
  // fully loaded (see `fields_not_loaded`).
  //
  // Pointer types are NOT included in these results. If a variable or field has
  // type *main.T, types will contain the definition of `main.T`, and the client
  // infers that the respective variable is a pointer based on its type name
  // starting with '*'.
  map<string, TypeInfo> types = 2;
}

message ListFunctionsIn {
  // binary_id identifies the binary for which function information is requested.
  int64 binary_id = 1;
  // filter, if not empty, specifies a string that needs to be contained in a
  // function name for it to be included in the result.
  // TODO: smart case?
  string filter = 2;
  // The maximum number of results. 0 means no limit.
  int32 limit = 3;
}

message ListFunctionsOut {
  repeated string Funcs = 1;
}

// ListTypesIn and ListTypesOut mimic the corresponding RPC from Delve.
message ListTypesIn {
  // binary_id identifies the binary for which types information is requested.
  int64 binary_id = 1;
  // filter, if not empty, specifies a string that needs to be contained in a
  // function name for it to be included in the result.
  // TODO: smart case?
  string filter = 2;
  // The maximum number of results. 0 means no limit.
  int32 limit = 3;
}

message ListTypesOut {
  repeated string Types = 1;
}

service DebugInfo {
  // ListProcesses gathers information from all connected agents about processes
  // of interest running on their hosts.
  rpc ListProcesses(ListProcessesIn) returns (stream ListProcessesOut);
  // DownloadBinary makes a binary available for future debug-info queries.
  rpc DownloadBinary(DownloadBinaryIn) returns (DownloadBinaryOut);
  
  // ListFunctions lists all functions in the target binary.
  rpc ListFunctions(ListFunctionsIn) returns (ListFunctionsOut);
  // ListTypes lists types in the target binary. Pointer types are not listed;
  // for example, only main.T is listed, not also *main.T.
  rpc ListTypes(ListTypesIn) returns (ListTypesOut);
  // GetTypeInfo returns information on one type.
  rpc GetTypeInfo(GetTypeInfoIn) returns (GetTypeInfoOut);
  // ListVars returns information on the variables in scope at the specified
  // code location. Information on both the variables and their types is
  // included in the response.
  //
  // Note that variables not available for collection may be included in the
  // result; loclist_available will be false for such variables.
  rpc ListVars(ListVarsIn) returns (ListVarsOut);
}

message FrameSpec {
  string func_name = 1;
  repeated string expressions = 2;
}

message TypeSpec {
  string type_name = 1;
  bool collect_all = 2;
  repeated string expressions = 3;
}

message GetSnapshotIn {
  // binary_id identifies the binary for which function information is requested.
  int64 binary_id = 1;
  // FrameSpec maps from function name to list of expressions to evaluate and
  // collect.
  repeated FrameSpec frame_specs = 2;
  // TypeSpecs contains specific instructions about what to collect when one of
  // these types is encountered.
  repeated TypeSpec type_specs = 3;
}

message CapturedExpression {
  string expression = 1;
  string value = 2;
}

// FrameData represents the data captured for a single stack frame.
message FrameData {
  int64 goroutine_id = 1;
  // The index of the frame in the stack. 0 is the leaf function.
  int64 frame_idx = 2;
  repeated CapturedExpression captured_exprs = 3;
}

message GetSnapshotOut {
  perftools.profiles.Profile profile = 1;
  //  // Map from goroutine ID to map from frame index to array of captured values.
  //  // The frame indexes match the order in Stacks - from leaf function to
  //  // callers.
  repeated FrameData frame_data = 2;
  //  // FlightRecorderData is a dump of the recorded data. The recorded data consists
  //  // of a map from key to buffer representing the latest events with that key.
  //  FlightRecorderData map[string][]string
}

service SnapshotService {
  rpc GetSnapshot(GetSnapshotIn) returns (GetSnapshotOut);
}

message ListProcessesIn {
  // TargetSpec defines a predicate for matching processes. All present fields
  // are ANDed together.
  message TargetSpec {
    string hostname = 1;
    string process_name = 2;
    string binary_path = 3;
  }

  // The results are processes that match one or more of these predicates.
  repeated TargetSpec predicates = 1;
}

message ListProcessesOut {
  // Reports contains an entry for every connected agent.
  repeated AgentReport reports = 1;
}

// AgentReport is the information reported by a single agent about the processes
// of interest it recognized on its host.
message AgentReport {
  // The name of the host where the agent is running.
  string hostname = 1;
  // The IP addresses of the host where the agent is running.
  repeated bytes ip_address = 2;
  string agent_version = 3;

  // processes can be empty if the agent did not find any processes matching the
  // predicates in the query.
  repeated Process processes = 4;
  
  // agent_id is a unique identifier for the agent. The ID is referenced by the
  // CaptureSnapshot RPC in order to identify which machine to collect process
  // snapshots from. If the server has a stable, unique identifier for an agent
  // (e.g. if the agent's IP or hostname are unique), then it will use that. If
  // two agents cannot be distinguished by the server (e.g. if two agents are
  // running on the same machine, probably by mistake), then the server will
  // generate synthetic identifiers. In this case, however, the IDs are not
  // usable after a server restart (i.e. CaptureSnapshot RPCs using them will
  // fail).
  //
  // TODO: Ideally, such an agent identifier would not make it to the client. If
  // the client does not have another unique way to identify between two or more
  // agents (e.g. IP, hostname, PID of target process running on that agent's
  // machine, etc.), then the ultimate human user also has no way to
  // disambiguate between the respective agents, and thus they shouldn't be
  // asked to. The server should thus find ways to deal with indistinguishable
  // agents in a way that is transparent to the client.
  string agent_id = 5;
}

message Process {
  int32 pid = 1;
  Binary binary = 2;
  repeated bytes command = 3;
  // The index(es) of the TargetSpec that matched this process within the
  // ListProcessesIn.predicates.
  int32 match_idx = 4;
}

message Binary {
  // An identifier for the binary. The same binary will result in the same
  // identifier every time.
  bytes ID = 1;
  bytes path = 2;
}

message DownloadBinaryIn {
  // binary_id identifies the binary to make durable.
  bytes binary_id = 1;

  // processes_config has information useful for finding the binary. The
  // assumption is that the binary corresponds to one or more processes returned
  // by a ListProcesses(process_config) call.
  ListProcessesIn processes_config = 2;
}

message DownloadBinaryOut {}
