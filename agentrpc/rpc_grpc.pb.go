// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc.proto

package agentrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DebugInfo_ListProcesses_FullMethodName = "/agentrpc.DebugInfo/ListProcesses"
	DebugInfo_LoadDebugInfo_FullMethodName = "/agentrpc.DebugInfo/LoadDebugInfo"
	DebugInfo_ListFunctions_FullMethodName = "/agentrpc.DebugInfo/ListFunctions"
	DebugInfo_ListTypes_FullMethodName     = "/agentrpc.DebugInfo/ListTypes"
	DebugInfo_GetTypeInfo_FullMethodName   = "/agentrpc.DebugInfo/GetTypeInfo"
	DebugInfo_ListVars_FullMethodName      = "/agentrpc.DebugInfo/ListVars"
)

// DebugInfoClient is the client API for DebugInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugInfoClient interface {
	// ListProcesses gathers information from all connected agents about processes
	// of interest running on their hosts.
	ListProcesses(ctx context.Context, in *ListProcessesIn, opts ...grpc.CallOption) (DebugInfo_ListProcessesClient, error)
	// LoadDebugInfo prepares the debug info for a particular binary for querying. It takes in a binary
	// ID and returns a token to be used by DWARF queries.
	LoadDebugInfo(ctx context.Context, in *LoadDebugInfoIn, opts ...grpc.CallOption) (*LoadDebugInfoOut, error)
	// ListFunctions lists all functions in the target binary.
	ListFunctions(ctx context.Context, in *ListFunctionsIn, opts ...grpc.CallOption) (*ListFunctionsOut, error)
	// ListTypes lists types in the target binary. Pointer types are not listed;
	// for example, only main.T is listed, not also *main.T.
	ListTypes(ctx context.Context, in *ListTypesIn, opts ...grpc.CallOption) (*ListTypesOut, error)
	// GetTypeInfo returns information on one type.
	GetTypeInfo(ctx context.Context, in *GetTypeInfoIn, opts ...grpc.CallOption) (*GetTypeInfoOut, error)
	// ListVars returns information on the variables in scope at the specified
	// code location. Information on both the variables and their types is
	// included in the response.
	//
	// Note that variables not available for collection may be included in the
	// result; loclist_available will be false for such variables.
	ListVars(ctx context.Context, in *ListVarsIn, opts ...grpc.CallOption) (*ListVarsOut, error)
}

type debugInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugInfoClient(cc grpc.ClientConnInterface) DebugInfoClient {
	return &debugInfoClient{cc}
}

func (c *debugInfoClient) ListProcesses(ctx context.Context, in *ListProcessesIn, opts ...grpc.CallOption) (DebugInfo_ListProcessesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DebugInfo_ServiceDesc.Streams[0], DebugInfo_ListProcesses_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &debugInfoListProcessesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DebugInfo_ListProcessesClient interface {
	Recv() (*ListProcessesOut, error)
	grpc.ClientStream
}

type debugInfoListProcessesClient struct {
	grpc.ClientStream
}

func (x *debugInfoListProcessesClient) Recv() (*ListProcessesOut, error) {
	m := new(ListProcessesOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugInfoClient) LoadDebugInfo(ctx context.Context, in *LoadDebugInfoIn, opts ...grpc.CallOption) (*LoadDebugInfoOut, error) {
	out := new(LoadDebugInfoOut)
	err := c.cc.Invoke(ctx, DebugInfo_LoadDebugInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugInfoClient) ListFunctions(ctx context.Context, in *ListFunctionsIn, opts ...grpc.CallOption) (*ListFunctionsOut, error) {
	out := new(ListFunctionsOut)
	err := c.cc.Invoke(ctx, DebugInfo_ListFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugInfoClient) ListTypes(ctx context.Context, in *ListTypesIn, opts ...grpc.CallOption) (*ListTypesOut, error) {
	out := new(ListTypesOut)
	err := c.cc.Invoke(ctx, DebugInfo_ListTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugInfoClient) GetTypeInfo(ctx context.Context, in *GetTypeInfoIn, opts ...grpc.CallOption) (*GetTypeInfoOut, error) {
	out := new(GetTypeInfoOut)
	err := c.cc.Invoke(ctx, DebugInfo_GetTypeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugInfoClient) ListVars(ctx context.Context, in *ListVarsIn, opts ...grpc.CallOption) (*ListVarsOut, error) {
	out := new(ListVarsOut)
	err := c.cc.Invoke(ctx, DebugInfo_ListVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugInfoServer is the server API for DebugInfo service.
// All implementations must embed UnimplementedDebugInfoServer
// for forward compatibility
type DebugInfoServer interface {
	// ListProcesses gathers information from all connected agents about processes
	// of interest running on their hosts.
	ListProcesses(*ListProcessesIn, DebugInfo_ListProcessesServer) error
	// LoadDebugInfo prepares the debug info for a particular binary for querying. It takes in a binary
	// ID and returns a token to be used by DWARF queries.
	LoadDebugInfo(context.Context, *LoadDebugInfoIn) (*LoadDebugInfoOut, error)
	// ListFunctions lists all functions in the target binary.
	ListFunctions(context.Context, *ListFunctionsIn) (*ListFunctionsOut, error)
	// ListTypes lists types in the target binary. Pointer types are not listed;
	// for example, only main.T is listed, not also *main.T.
	ListTypes(context.Context, *ListTypesIn) (*ListTypesOut, error)
	// GetTypeInfo returns information on one type.
	GetTypeInfo(context.Context, *GetTypeInfoIn) (*GetTypeInfoOut, error)
	// ListVars returns information on the variables in scope at the specified
	// code location. Information on both the variables and their types is
	// included in the response.
	//
	// Note that variables not available for collection may be included in the
	// result; loclist_available will be false for such variables.
	ListVars(context.Context, *ListVarsIn) (*ListVarsOut, error)
	mustEmbedUnimplementedDebugInfoServer()
}

// UnimplementedDebugInfoServer must be embedded to have forward compatible implementations.
type UnimplementedDebugInfoServer struct {
}

func (UnimplementedDebugInfoServer) ListProcesses(*ListProcessesIn, DebugInfo_ListProcessesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedDebugInfoServer) LoadDebugInfo(context.Context, *LoadDebugInfoIn) (*LoadDebugInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDebugInfo not implemented")
}
func (UnimplementedDebugInfoServer) ListFunctions(context.Context, *ListFunctionsIn) (*ListFunctionsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedDebugInfoServer) ListTypes(context.Context, *ListTypesIn) (*ListTypesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTypes not implemented")
}
func (UnimplementedDebugInfoServer) GetTypeInfo(context.Context, *GetTypeInfoIn) (*GetTypeInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeInfo not implemented")
}
func (UnimplementedDebugInfoServer) ListVars(context.Context, *ListVarsIn) (*ListVarsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVars not implemented")
}
func (UnimplementedDebugInfoServer) mustEmbedUnimplementedDebugInfoServer() {}

// UnsafeDebugInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugInfoServer will
// result in compilation errors.
type UnsafeDebugInfoServer interface {
	mustEmbedUnimplementedDebugInfoServer()
}

func RegisterDebugInfoServer(s grpc.ServiceRegistrar, srv DebugInfoServer) {
	s.RegisterService(&DebugInfo_ServiceDesc, srv)
}

func _DebugInfo_ListProcesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProcessesIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugInfoServer).ListProcesses(m, &debugInfoListProcessesServer{stream})
}

type DebugInfo_ListProcessesServer interface {
	Send(*ListProcessesOut) error
	grpc.ServerStream
}

type debugInfoListProcessesServer struct {
	grpc.ServerStream
}

func (x *debugInfoListProcessesServer) Send(m *ListProcessesOut) error {
	return x.ServerStream.SendMsg(m)
}

func _DebugInfo_LoadDebugInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadDebugInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServer).LoadDebugInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugInfo_LoadDebugInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServer).LoadDebugInfo(ctx, req.(*LoadDebugInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugInfo_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFunctionsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugInfo_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServer).ListFunctions(ctx, req.(*ListFunctionsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugInfo_ListTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServer).ListTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugInfo_ListTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServer).ListTypes(ctx, req.(*ListTypesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugInfo_GetTypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServer).GetTypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugInfo_GetTypeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServer).GetTypeInfo(ctx, req.(*GetTypeInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugInfo_ListVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVarsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServer).ListVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugInfo_ListVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServer).ListVars(ctx, req.(*ListVarsIn))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugInfo_ServiceDesc is the grpc.ServiceDesc for DebugInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentrpc.DebugInfo",
	HandlerType: (*DebugInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadDebugInfo",
			Handler:    _DebugInfo_LoadDebugInfo_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _DebugInfo_ListFunctions_Handler,
		},
		{
			MethodName: "ListTypes",
			Handler:    _DebugInfo_ListTypes_Handler,
		},
		{
			MethodName: "GetTypeInfo",
			Handler:    _DebugInfo_GetTypeInfo_Handler,
		},
		{
			MethodName: "ListVars",
			Handler:    _DebugInfo_ListVars_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProcesses",
			Handler:       _DebugInfo_ListProcesses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

const (
	SnapshotService_GetSnapshot_FullMethodName = "/agentrpc.SnapshotService/GetSnapshot"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	GetSnapshot(ctx context.Context, in *GetSnapshotIn, opts ...grpc.CallOption) (*GetSnapshotOut, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) GetSnapshot(ctx context.Context, in *GetSnapshotIn, opts ...grpc.CallOption) (*GetSnapshotOut, error) {
	out := new(GetSnapshotOut)
	err := c.cc.Invoke(ctx, SnapshotService_GetSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility
type SnapshotServiceServer interface {
	GetSnapshot(context.Context, *GetSnapshotIn) (*GetSnapshotOut, error)
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServiceServer struct {
}

func (UnimplementedSnapshotServiceServer) GetSnapshot(context.Context, *GetSnapshotIn) (*GetSnapshotOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).GetSnapshot(ctx, req.(*GetSnapshotIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentrpc.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshot",
			Handler:    _SnapshotService_GetSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
